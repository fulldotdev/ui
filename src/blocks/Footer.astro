---
import type { ComponentProps, HTMLAttributes, HTMLTag } from 'astro/types'
import Channels from 'fulldev-ui/components/Channels.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Logo from 'fulldev-ui/components/Logo.astro'
import Menu from 'fulldev-ui/components/Menu.astro'
import Paragraph from 'fulldev-ui/components/Paragraph.astro'
import Socials from 'fulldev-ui/components/Socials.astro'
import Text from 'fulldev-ui/components/Text.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props extends GlobalProps, HTMLAttributes<'footer'> {
  as?: HTMLTag
  variant?: 1 | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  logo?: ComponentProps<typeof Logo>['src']
  company?: ComponentProps<typeof Logo>['company']
  paragraph?: ComponentProps<typeof Paragraph>['text']
  socials?: ComponentProps<typeof Socials>['socials']
  channels?: ComponentProps<typeof Channels>['channels']
  hours?: any
  menu?: ComponentProps<typeof Menu>['groups']
}

const {
  as = 'footer',
  size = 'sm',
  variant = 1,
  logo,
  company,
  paragraph,
  socials,
  channels,
  hours,
  menu,
  ...rest
} = Astro.props
---

<Element
  class:list="footer"
  {as}
  {size}
  {variant}
  {...rest}
>
  <Element class:list="footer-container">
    <Element class:list="footer-content">
      <Logo
        {size}
        {company}
        {...typeof logo === 'string' ? { src: logo } : logo}
      />
      <Paragraph
        {size}
        text={paragraph}
      />
      <Socials
        {size}
        {socials}
      />
    </Element>
    <Channels {channels} />
    <!-- <Hours {hours} /> -->
    <Menu
      direction="row"
      groups={menu}
      {size}
    />
    <Element class:list="hours column">
      <Heading
        text={hours?.heading}
        level={5}
      />
      <Element>
        {
          Object.entries(hours?.days ?? {})?.map(([key, value]: any) => (
            <Element class:list="spread">
              <Text text={key} />
              <Text text={value} />
            </Element>
          ))
        }
      </Element>
    </Element>
  </Element>
</Element>

<style is:global>
  @layer fulldev {
    .footer {
      @apply relative w-full;

      &.dark {
        @apply bg-background;
      }

      .footer-container {
        @apply container flex flex-wrap justify-between gap-12 py-12;
      }

      .footer-content {
        @apply flex max-w-60 flex-col gap-4;
      }
    }
  }
</style>
