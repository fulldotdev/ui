<!-- ---
import fs from "fs/promises"
import { Code } from "astro:components"

import type { BlockProps } from "@/lib/types"
import { Block as BlockComponent } from "@/components/block"
import Block1 from "@/blocks/block-1"

export async function getStaticPaths() {
  const blockFiles = import.meta.glob("/src/blocks/*.tsx")

  const uniqueBlockCategories = [
    ...new Set(
      Object.keys(blockFiles)
        .map((file) => {
          const fileName = file.split("/").pop()?.split(".")[0]
          return fileName?.split("-")[0]
        })
        .filter(Boolean)
    ),
  ]

  return uniqueBlockCategories.map((category) => {
    const blocksInCategory = Object.keys(blockFiles)
      .filter((file) => file.includes(`${category}-`))
      .map((file) => {
        const name = file.split("/").pop()?.split(".")[0]
        return name
      })
      .filter(Boolean)

    return {
      params: {
        block: category,
      },
      props: {
        category,
        blocks: blocksInCategory,
      },
    }
  })
}

const { category, blocks } = Astro.props

const hTag = category === "hero" ? "h1" : "h2"

const props: BlockProps = {
  tagline: "Lorem ipsum",
  title: "Lorem ipsum dolor sit amet",
  description:
    "Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quos.",
  html: `
    <${hTag}>Lorem ipsum dolor sit amet consectetur elit</${hTag}>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quos.</p>
  `,
  links: [
    {
      href: "#href",
      text: "Lorem ipsum",
    },
    {
      href: "#href",
      text: "Dolor sit",
    },
  ],
  list: [
    "Lorem ipsum dolor sit amet",
    "Dolor sit amet",
    "Amet consectetur",
    "Adipisicing elit",
  ],
  chip: {
    text: "Lorem ipsum",
    href: "#href",
  },
  // review: {
  //   rating: 5,
  //   tagline: "100+ downloads",
  //   images: [
  //     { src: "/images/placeholder.webp", alt: "Review 1" },
  //     { src: "/images/placeholder.webp", alt: "Review 2" },
  //     { src: "/images/placeholder.webp", alt: "Review 3" },
  //     { src: "/images/placeholder.webp", alt: "Review 4" },
  //   ],
  // },
  image: "/placeholder.webp",
  items: [1, 2].map(() => ({
    tagline: "Lorem ipsum",
    rating: 5,
    image: "/placeholder.webp",
    avatar: "/placeholder.webp",
    icon: "check",
    href: "#href",
    published: new Date("2025-03-09"),
    title: "Lorem ipsum",
    description: "Lorem ipsum dolor sit amet consectetur",
    list: [
      "Lorem ipsum dolor sit amet",
      "Dolor sit amet",
      "Amet consectetur",
      "Adipisicing elit",
    ],
    links: [
      {
        href: "#href",
        text: "Lorem ipsum",
      },
    ],
  })),
  form: {
    fields: [
      {
        name: "name",
        type: "text",
        label: "Name",
      },
      {
        name: "email",
        type: "email",
        label: "Email",
      },
      {
        name: "message",
        type: "textarea",
        label: "Message",
      },
    ],
    submit: "Submit",
  },
  menus: [
    {
      text: "Lorem",
      links: [
        {
          text: "Lorem ipsum",
          href: "#href",
        },
        {
          text: "Lorem ipsum",
          href: "#href",
        },
      ],
    },
    {
      text: "Lorem",
      links: [
        {
          text: "Lorem ipsum",
          href: "#href",
        },
        {
          text: "Lorem ipsum",
          href: "#href",
        },
      ],
    },
    {
      text: "Lorem",
      links: [
        {
          text: "Lorem ipsum",
          href: "#href",
        },
        {
          text: "Lorem ipsum",
          href: "#href",
        },
      ],
    },
  ],
  socials: [
    "https://twitter.com/silveltm",
    "https://github.com/fulldotdev",
    "https://linkedin.com/in/silveltman",
  ],
  images: ["/placeholder.webp", "/placeholder.webp", "/placeholder.webp"],
}

const blockNamesAndCodes = await Promise.all(
  blocks?.map(async (block) => {
    const filePath = `src/blocks/${block}.tsx`
    const code = await fs.readFile(filePath, "utf-8")
    return {
      name: block,
      code: code,
    }
  })
)
---

<Layout {...layout}>
  {
    blockNamesAndCodes?.map(({ name, code }) => (
      <Block1 client:load title={name}>
        <Code
          class="rounded-lg p-4 text-sm"
          slot="code"
          lang="tsx"
          code={code}
        />
        <BlockComponent slot="preview" client:load block={name} {...props} />
      </Block1>
    ))
  }
</Layout> -->
