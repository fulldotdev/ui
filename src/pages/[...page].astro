---
import config from "@/data/config.json"
import settingJson from "@/data/settings.json"
import { getCollection, getEntries, render } from "astro:content"

import { getHref } from "@/lib/get-href"
import Block from "@/components/misc/block.astro"
import Layout from "@/components/misc/layout.astro"

export async function getStaticPaths() {
  const pages = await getCollection("pages")
  const collections = config.content.collections.slug
    ? await getCollection("collections")
    : []
  const locations = config.content.collections.slug
    ? await getCollection("locations")
    : []
  const persons = config.content.collections.slug
    ? await getCollection("persons")
    : []
  const posts = config.content.collections.slug
    ? await getCollection("posts")
    : []
  const products = config.content.collections.slug
    ? await getCollection("products")
    : []
  const projects = config.content.collections.slug
    ? await getCollection("projects")
    : []

  const entries = [
    ...pages,
    ...collections,
    ...locations,
    ...posts,
    ...persons,
    ...products,
    ...projects,
  ]

  return entries.map((entry) => ({
    params: {
      page: getHref(entry.collection, entry.id),
    },
    props: {
      entry,
      search: entries.map((entry) => ({
        text: entry.data.title,
        href: getHref(entry.collection, entry.id),
      })),
      content: {
        pages,
        collections,
        locations,
        posts,
        persons,
        products,
        projects,
      },
    },
  }))
}

const { entry, search, content } = Astro.props

const { Content } = await render(entry)
const { body } = entry
const { type, sections, seo, ...data } = entry.data
const { banner, header, footer, ...settings } = settingJson

const firstType = type === "page" && !body?.trim() ? undefined : type

const entries = async (
  collection: keyof typeof content,
  references?: Parameters<typeof getEntries>[0]
) => {
  if (!references) return content[collection]
  else return await getEntries(references)
}
---

<Layout {...settings} {...data} {...seo}>
  <Block type="banner" {...banner} />
  <Block type="header" search={search} {...header} />
  <Block type="header" search={search} {...header} />
  <main>
    <Block type={firstType} level={1} {...data}>
      <Content />
    </Block>
    {
      sections?.map((section, i) => (
        <Block level={!firstType && i === 0 ? 1 : 2} {...section} />
      ))
    }
  </main>
  <Block type="footer" {...footer} />
</Layout>
