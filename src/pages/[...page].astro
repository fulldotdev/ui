---
import { Banner } from "@/blocks/banner"
import { Footer } from "@/blocks/footer"
import { Header } from "@/blocks/header"
import settings from "@/data/settings.json"
import { getCollection, render } from "astro:content"

import { getHref } from "@/lib/get-href"
import Block from "@/components/misc/block.astro"
import Layout from "@/components/misc/layout.astro"

export async function getStaticPaths() {
  const articles = await getCollection("articles")
  const collections = await getCollection("collections")
  const pages = await getCollection("pages")
  const persons = await getCollection("persons")
  const products = await getCollection("products")
  const projects = await getCollection("projects")
  const entries = [
    ...pages,
    ...articles,
    ...collections,
    ...products,
    ...projects,
    ...persons,
  ]

  return entries.map((entry) => ({
    params: {
      page: getHref(entry.collection, entry.id),
    },
    props: entry,
  }))
}

const { Content } = await render(Astro.props)
const {
  id,
  data: { sections, seo, type, ...restData },
} = Astro.props
const { banner, header, footer, ...restSettings } = settings

const pages = await getCollection("pages")
const articles = await getCollection("articles")
const products = await getCollection("products")
const projects = await getCollection("projects")
const persons = await getCollection("persons")
const collections = await getCollection("collections")

function collectionToLinks(
  collection:
    | typeof pages
    | typeof articles
    | typeof products
    | typeof projects
    | typeof persons
    | typeof collections
) {
  return collection.map((item) => ({
    text: item.data.title,
    href: getHref(item.collection, item.id),
  }))
}

const search = [
  {
    heading: "Pagina's",
    links: collectionToLinks(pages),
  },
  {
    heading: "Artikelen",
    links: collectionToLinks(articles),
  },
  {
    heading: "Producten",
    links: collectionToLinks(products),
  },
  {
    heading: "Collecties",
    links: collectionToLinks(collections),
  },
  {
    heading: "Projecten",
    links: collectionToLinks(projects),
  },
  {
    heading: "Personen",
    links: collectionToLinks(persons),
  },
]
---

<Layout {...restSettings} {...restData} {...seo}>
  <Banner>
    {banner}
  </Banner>
  <Header client:load search={search} {...header} />
  <main>
    <Block entryId={id} {type} {...restData}>
      <Content />
    </Block>
    {sections?.map((section) => <Block {...section} />)}
  </main>
  <Footer {...footer} />
</Layout>
