---
import { getCollection, getEntry } from 'astro:content'
import { getHref } from 'fulldev-ui/utils/getHref.ts'
import { dash, pascal } from 'radash'
import { mergeDeep } from 'remeda'

export async function getStaticPaths() {
  const collection = await getCollection('pages')
  return collection.map((entry) => ({
    params: {
      page: getHref(entry.id),
    },
    props: entry,
  }))
}

const layoutName = Astro.props.data._layout ?? 'Page'
const layoutComponentName = pascal(layoutName)

const layoutsComponents = {
  ...import.meta.glob('/src/layouts/**/*.astro'),
  ...import.meta.glob('../layouts/**/*.astro'),
}

const layoutComponentPath = Object.keys(layoutsComponents).find(
  (path) => path.split('/').pop()?.split('.')[0] === layoutComponentName
)

const LayoutComponent =
  layoutComponentPath &&
  (await (layoutsComponents[layoutComponentPath] as any)()).default

const layoutEntryName = dash(layoutName)
const layoutEntry = await getEntry('layouts', layoutEntryName)
const baseLayout = await getEntry('layouts', 'base')
const mergedLayouts = mergeDeep(baseLayout || {}, layoutEntry || {})
const merged = mergeDeep(mergedLayouts, Astro.props)

const { data, ...rest } = merged
---

{
  LayoutComponent && (
    <LayoutComponent
      {...data}
      {...rest}
    />
  )
}
