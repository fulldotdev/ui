---
import { i18n } from "astro:config/server"
import { getCollection, getEntry, render } from "astro:content"

import { getHrefByEntry } from "@/lib/collections"
import Layout from "@/components/layout.astro"
import { Page as CloudCannonPage } from "@/components/page"

// Generate static paths
export async function getStaticPaths() {
  const entries = await getCollection("content")
  const locales = i18n?.locales.filter(
    (locale) => locale !== i18n?.defaultLocale
  )

  return entries
    .map((entry) => {
      // Try to find translated entries, so a warning is shown if a translated entry is not found
      locales?.forEach(async (locale) => {
        if (locales?.includes(entry.id.split("/")[0])) return
        await getEntry("content", `${locale}/${entry.id}`)
      })

      const href = getHrefByEntry(entry)
      if (!href) return undefined
      return {
        params: {
          entry: href === "/" ? undefined : href,
        },
        props: {
          entry,
          entries,
        },
      }
    })
    .filter(Boolean)
}

const { Content } = await render(Astro.props.entry)
const { data } = Astro.props.entry
const entries = Astro.props.entries
---

<Layout {...data}>
  <CloudCannonPage client:load {...data} entries={entries}>
    <Content />
  </CloudCannonPage>
</Layout>
