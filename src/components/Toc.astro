---
import type { MarkdownHeading } from 'astro'
import type { HTMLAttributes } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'
import Link from './Link.astro'

interface Props extends GlobalProps, HTMLAttributes<'div'> {
  headings?: MarkdownHeading[] | undefined
}

const { headings, ...rest } = Astro.props

const filteredHeadings = headings?.filter(
  (heading: any) => heading.depth >= 2 && heading.depth <= 4
)

const h1 = headings?.find((heading: any) => heading.depth === 1)

const links = filteredHeadings?.map((button: any) => ({
  text: button.text,
  href: `#${button.slug}`,
  class: `depth-${button.depth}`,
}))
---

<Element
  class:list="toc"
  if={filteredHeadings?.length}
  {...rest}
>
  <Heading
    as="a"
    href="#"
    {...h1}
  />
  {
    links?.map((link) => (
      <Link
        variant="muted"
        size="sm"
        {...link}
      />
    ))
  }
</Element>

<style is:global>
  @layer fulldev {
    .toc {
      @apply lg:top-sticky-16 sticky bottom-0 z-10 hidden w-48 shrink-0 flex-col items-start justify-start gap-3 overflow-y-auto md:flex;
      @apply scrollbar scrollbar-track-transparent scrollbar-thumb-accent scrollbar-thumb-rounded-full scrollbar-w-2 hover:scrollbar-thumb-accent-hover;

      .depth-3 {
        @apply pl-3;
      }

      .depth-4 {
        @apply relative pl-6;
      }
    }
  }
</style>
