---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Element from 'fulldev-ui/components/Element.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'
import Links from './Links.astro'

interface Props extends GlobalProps, HTMLAttributes<'div'> {
  heading?: ComponentProps<typeof Heading>['text']
  render?: CollectionEntry<'pages'>['render'] | undefined
}

const { size = 'sm', heading = 'On this page', render, ...rest } = Astro.props

const headings = render ? (await render())?.headings : []
const filteredHeadings = headings?.filter(
  (heading: any) => heading.depth >= 2 && heading.depth <= 4
)
const links = filteredHeadings?.map((button: any) => ({
  text: button.text,
  href: `#${button.slug}`,
  class: `depth-${button.depth}`,
}))
---

<Element
  if={filteredHeadings?.length > 1}
  class:list="toc"
  {size}
  {...rest}
>
  <Heading
    level={5}
    text={heading}
    {size}
  />
  <Links
    direction="column"
    {links}
    {size}
  />
</Element>

<style is:global>
  @layer fulldev {
    .toc {
      @apply sticky bottom-0 z-10 -mt-14 hidden w-52 shrink-0 flex-col items-start justify-start gap-3 overflow-y-auto py-14 md:flex;
      @apply scrollbar scrollbar-track-transparent scrollbar-thumb-accent scrollbar-thumb-rounded-full scrollbar-w-2 hover:scrollbar-thumb-accent-hover;

      top: var(--header-height, 0px);
      max-height: calc(100vh - var(--header-height, 0px));

      .depth-3 {
        @apply pl-3;
      }

      .depth-4 {
        @apply relative pl-6;
      }
    }
  }
</style>
