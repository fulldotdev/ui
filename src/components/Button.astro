---
import type { ComponentProps, HTMLAttributes, HTMLTag } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'
import Avatar from 'fulldev-ui/components/Avatar.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props
  extends GlobalProps,
    HTMLAttributes<'button'>,
    HTMLAttributes<'a'> {
  as?: HTMLTag
  href?: string | null | undefined
  type?: HTMLAttributes<'button'>['type'] & HTMLAttributes<'a'>['type']
  icon?: ComponentProps<typeof Icon>['name']
  avatar?: ComponentProps<typeof Avatar>['src']
  slug?: CollectionEntry<'pages'>['slug'] | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  text?: string | undefined
  variant?:
    | 'primary'
    | 'secondary'
    | 'outline'
    | 'ghost'
    | 'destructive'
    | 'link'
    | undefined
}

const {
  slug,
  href = slug === 'index' ? '/' : slug ? `/${slug}/` : undefined,
  text = slug ? (await getEntry('pages', slug)).data.title : undefined,
  as = href ? 'a' : 'button',
  type = as === 'button' ? 'button' : undefined,
  target = href?.startsWith('http') ? '_blank' : undefined,
  variant = 'primary',
  avatar,
  icon,
  ...rest
} = Astro.props
---

<Element
  class:list={['button']}
  {href}
  {as}
  {type}
  {target}
  {variant}
  {...rest}
>
  <Icon name={icon} />
  <Element as="span">
    <Fragment set:html={text} />
    <slot />
  </Element>
</Element>

<style is:global>
  @layer fulldev {
    .button {
      @apply inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium leading-none ring-offset-background transition-colors;
      @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2;
      @apply disabled:pointer-events-none disabled:opacity-50;

      &.size-sm,
      &:where(.size-sm &) {
        @apply h-9 min-w-9 rounded-sm px-4;
      }

      &.size-md,
      &:where(.size-md &) {
        @apply h-11 min-w-10 rounded-md px-5;
      }

      &.size-lg,
      &:where(.size-lg &) {
        @apply h-12 min-w-12 rounded-md px-6;
      }

      &.variant-primary {
        @apply hover:bg-primary-hover bg-primary text-primary-foreground;
      }

      &.variant-secondary {
        @apply hover:bg-secondary-hover bg-secondary text-secondary-foreground;
      }

      &.variant-outline {
        @apply border border-input bg-background hover:bg-accent hover:text-accent-foreground;
      }

      &.variant-ghost {
        @apply hover:bg-accent hover:text-accent-foreground;
      }

      &.variant-link {
        @apply h-auto p-0 text-primary underline-offset-4 hover:underline;
      }

      .icon {
        @apply first:last:absolute;
      }

      span {
        @apply text-inherit;
      }
    }
  }
</style>
