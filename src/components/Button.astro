---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'
import Avatar from 'fulldev-ui/components/Avatar.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'

interface Props
  extends ComponentProps<typeof Element>,
    HTMLAttributes<'button' | 'a'>,
    HTMLAttributes<'label'> {
  icon?: ComponentProps<typeof Icon>['name']
  avatar?: ComponentProps<typeof Avatar>['src']
  slug?: CollectionEntry<'pages'>['slug'] | undefined
  variant?: 'primary' | 'secondary' | 'tertiary' | 'link' | undefined
  html?: string | undefined
  text?: string | undefined
}

const {
  variant = 'primary',
  as = 'a',
  href,
  slug,
  color,
  text,
  avatar,
  icon,
  html,
  ...rest
} = Astro.props

const entry = slug && !text ? await getEntry('pages', slug) : undefined
---

<Element
  class:list="button"
  as={as}
  href={href ?? (slug ? (slug === 'index' ? '/' : `/${slug}/`) : undefined)}
  color={variant === 'link' && href === Astro.url.pathname ? 'brand' : color}
  {variant}
  {...rest}
>
  <slot>
    <Avatar src={avatar} />
    <Icon name={icon} />
    <Fragment set:html={text ?? html ?? entry?.data.title} />
  </slot>
</Element>

<style is:global lang="scss">
  @layer fulldev {
    .button {
      display: inline-flex;
      flex-shrink: 0;
      justify-content: center;
      align-items: center;
      vertical-align: top;
      gap: var(--space-2);
      appearance: none;
      transition: background-color;
      cursor: pointer;
      outline: none;
      box-shadow: none;
      border-width: 0px;
      border-radius: var(--radius-1);
      padding: 0 var(--space-4);
      height: calc(var(--text-2) + 2 * var(--space-4));
      color: var(--text);
      font-weight: 500;
      font-size: var(--text-2);
      line-height: 1;
      text-align: center;
      text-decoration: none;
      white-space: nowrap;

      .avatar {
        margin-right: calc(-1 * (var(--space-4)));
        margin-left: var(--space-1);
        padding: calc(var(--space-1) / 3);
        width: calc(var(--text-2) + 2 * var(--space-4)) !important;
        height: calc(var(--text-2) + 2 * var(--space-4)) !important;
      }

      &:focus-visible {
        outline: 2px solid var(--focus) !important;
        outline-offset: 2px;
      }

      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
      }

      &.variant-primary {
        background-color: var(--color-9);
        color: var(--color-contrast);

        &:hover,
        &:active {
          background-color: var(--color-10);
        }
      }

      &.variant-secondary {
        border-style: solid;
        border-color: var(--color-7);
        background-color: var(--color-3);
        color: var(--color-11);

        &:hover {
          border-color: var(--color-8);
          background-color: var(--color-4);
        }

        &:active {
          border-color: var(--color-8);
          background-color: var(--color-5);
        }
      }

      &.variant-tertiary {
        color: var(--color-11);

        &:hover {
          background-color: var(--color-3);
        }

        &:active {
          background-color: var(--color-4);
        }
      }

      &.variant-link {
        justify-content: flex-start;
        padding: 0;
        height: auto;
        color: var(--color-11);
        font-weight: 400;

        &:hover {
          color: var(--color-12);
        }

        &:active {
          color: var(--color-12);
        }
      }
    }
  }
</style>
