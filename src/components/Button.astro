---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'
import Avatar from 'fulldev-ui/components/Avatar.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props
  extends GlobalProps,
    HTMLAttributes<'button'>,
    HTMLAttributes<'a'>,
    HTMLAttributes<'label'> {
  type?: HTMLAttributes<'button'>['type'] & HTMLAttributes<'a'>['type']
  icon?: ComponentProps<typeof Icon>['name']
  avatar?: ComponentProps<typeof Avatar>['src']
  slug?: CollectionEntry<'pages'>['slug'] | undefined
  reverse?: boolean | undefined
  text?: string | undefined
  variant?:
    | 'primary'
    | 'secondary'
    | 'outline'
    | 'ghost'
    | 'destructive'
    | 'link'
    | undefined
}

const { variant = 'secondary', slug, text, avatar, icon, ...rest } = Astro.props

const entry = slug && !text ? await getEntry('pages', slug) : undefined
const hrefString =
  rest.href && typeof rest.href !== 'string' ? rest.href.href : rest.href
const href =
  hrefString ?? (slug ? (slug === 'index' ? '/' : `/${slug}/`) : undefined)
const as = href ? 'a' : rest.for ? 'label' : 'button'
const color =
  variant === 'link' && href === Astro.url.pathname ? 'brand' : rest.color
---

<Element
  class:list="button"
  _target={href?.startsWith('http') ? '_blank' : undefined}
  type={as === 'button' ? 'button' : undefined}
  {as}
  {href}
  {color}
  {variant}
  {...rest}
>
  <slot>
    <Avatar src={avatar} />
    <Icon name={icon} />
    <Fragment set:html={text ?? entry?.data.title} />
  </slot>
</Element>

<style is:global lang="scss">
  @layer fulldev {
    .button {
      display: inline-flex;
      justify-content: center;
      align-items: center;
      gap: var(--spacing-2);
      transition: var(--transition);
      border-radius: var(--radius-md);
      font-weight: var(--font-weight-medium);
      font-size: var(--font-size-sm);
      line-height: 1;
      white-space: nowrap;

      &:focus-visible {
        outline: 2px solid var(--ring);
        outline-offset: 2px;
      }

      &:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        pointer-events: none;
      }

      &.variant-primary {
        background-color: hsl(var(--primary));
        color: hsl(var(--primary-foreground));

        &:hover {
          background-color: hsl(var(--primary) / 0.9);
        }
      }

      &.variant-secondary {
        background-color: hsl(var(--secondary));
        color: hsl(var(--secondary-foreground));

        &:hover {
          background-color: hsl(var(--secondary) / 0.8);
        }
      }

      &.variant-outline {
        border: 1px solid hsl(var(--input));
        background-color: hsl(var(--background));

        &:hover {
          background-color: hsl(var(--accent));
          color: hsl(var(--accent-foreground));
        }
      }

      &.variant-ghost:hover {
        background-color: hsl(var(--accent));
        color: hsl(var(--accent-foreground));
      }

      &.variant-destructive {
        background-color: hsl(var(--destructive));
        color: hsl(var(--destructive-foreground));

        &:hover {
          background-color: hsl(var(--destructive) / 0.9);
        }
      }

      &.variant-link {
        color: hsl(var(--primary));
        text-underline-offset: 4px;

        &:hover {
          text-decoration: underline;
        }
      }

      &:is(&.size-sm),
      &:where(.size-sm &) {
        padding: 0 var(--spacing-3);
        min-width: var(--spacing-9);
        min-height: var(--spacing-9);
      }

      &:is(&.size-md),
      &:where(.size-md &) {
        padding: 0 var(--spacing-4);
        min-width: var(--spacing-10);
        height: var(--spacing-10);
      }

      &:is(&.size-lg),
      &:where(.size-lg &) {
        padding: 0 var(--spacing-8);
        min-width: var(--spacing-11);
        height: var(--spacing-11);
      }

      .avatar {
        margin-right: calc(-1 * (var(--space-4)));
        margin-left: var(--space-1);
        padding: calc(var(--space-1) / 3);
        width: calc(var(--text-2) + 2 * var(--space-4)) !important;
        height: calc(var(--text-2) + 2 * var(--space-4)) !important;
      }

      &.reverse > * {
        order: 999;
      }
    }
  }
</style>
