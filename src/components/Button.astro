---
import type { HTMLAttributes, HTMLTag } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import type { ButtonSchema } from 'fulldev-ui/schemas/components/button'

interface Props
  extends HTMLAttributes<'button'>,
    Omit<HTMLAttributes<'a'>, 'href'>,
    ButtonSchema {
  as?: HTMLTag
  type?: HTMLAttributes<'button'>['type'] & HTMLAttributes<'a'>['type']
  reverse?: boolean | undefined
}

const {
  href,
  as = href ? 'a' : 'button',
  variant = 'primary',
  size = 'md',
  text,
  icon,
  ...rest
} = Astro.props
---

<Element
  class:list={['button']}
  {as}
  {href}
  {variant}
  {size}
  {...rest}
>
  <Icon name={icon} />
  <Element as="span">
    <Fragment set:html={text} />
    <slot />
  </Element>
</Element>

<style is:global>
  @layer fulldev {
    .button {
      @apply inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium leading-none ring-offset-background transition-colors;
      @apply focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2;
      @apply disabled:pointer-events-none disabled:opacity-50;

      &.size-sm {
        @apply h-9 min-h-9 min-w-9 px-2;
      }

      &.size-md {
        @apply h-10 min-h-10 min-w-10 px-4;
      }

      &.size-lg {
        @apply h-11 min-h-11 min-w-11 px-5;
      }

      &.variant-primary {
        @apply bg-primary text-primary-foreground hover:bg-primary-hover;
      }

      &.variant-secondary {
        @apply bg-secondary text-secondary-foreground hover:bg-secondary-hover;
      }

      &.variant-outline {
        @apply border border-input text-accent-foreground hover:bg-accent;
      }

      &.variant-ghost {
        @apply text-accent-foreground hover:bg-accent;
      }

      .icon {
        @apply first:last:absolute;
      }

      span {
        @apply text-inherit;
      }

      &.reverse {
        .icon {
          @apply order-last;
        }
      }
    }
  }
</style>
