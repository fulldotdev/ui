---
import type { ComponentProps, HTMLAttributes, HTMLTag } from 'astro/types'
import Button from 'fulldev-ui/components/Button.astro'
import Buttons from 'fulldev-ui/components/Buttons.astro'
import type Card from 'fulldev-ui/components/Card.astro'
import Cards from 'fulldev-ui/components/Cards.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Image from 'fulldev-ui/components/Image.astro'
import Badge from './Badge.astro'
import Lead from './Lead.astro'
import List from './List.astro'
import Paragraph from './Paragraph.astro'
import Price from './Price.astro'
import Rating from './Rating.astro'
import Tagline from './Tagline.astro'

interface Props extends HTMLAttributes<'section'> {
  as?: HTMLTag
  size?: 'sm' | 'md' | 'lg' | undefined
  image?: ComponentProps<typeof Image>
  position?: ComponentProps<typeof Image>['position']
  buttons?: ComponentProps<typeof Buttons>['buttons']
  button?: ComponentProps<typeof Button> | undefined
  variant?: ComponentProps<typeof Button>['variant']
  cards?: ComponentProps<typeof Cards>['cards']
  panel?: ComponentProps<typeof Card>['panel']
  component?: string
  heading?: any
  lead?: any
  rating?: any
  tagline?: any
  badge?: any
  level?: any
  paragraph?: any
  list?: any
  price?: any
  center?: boolean
  inset?: boolean
  reverse?: boolean
  structure?:
    | 'left'
    | 'center'
    | 'spread'
    | 'split'
    | 'grid'
    | 'masonry'
    | 'carousel'
    | 'stack'
}

const { component, ...props } = Astro.props

const {
  as = 'section',
  size = 'md',
  variant = 'secondary',
  structure = 'left',
  inset = false,
  panel = false,
  reverse = false,
  level = 2,
  rating,
  tagline,
  badge,
  heading,
  lead,
  paragraph,
  list,
  price,
  buttons,
  image,
  cards,
  ...rest
} = props

const allComponents = {
  ...import.meta.glob('/src/**/*.astro'),
  ...import.meta.glob('../../**/*.astro'),
}

const componentPath = Object.keys(allComponents).find(
  (path) => path.split('/').pop()?.split('.')[0] === component
)

const Component =
  componentPath && (await (allComponents[componentPath] as any)()).default

const hasCards = cards && cards.length > 0
---

{
  Component ? (
    <Component {...props} />
  ) : (
    <Element
      class:list="section"
      panel={hasCards ? undefined : panel}
      {as}
      {size}
      {structure}
      {inset}
      {reverse}
      {...rest}
    >
      <Element class:list="section-container">
        <Element class:list="section-segment">
          <Element class:list="section-content">
            <Rating
              {size}
              {...rating}
            />
            <Tagline
              text={tagline}
              {size}
            />
            <Badge
              {size}
              {...badge}
            />
            <Heading
              text={heading}
              {size}
              {level}
            />
            <Lead
              text={lead}
              {size}
            />
            <Paragraph
              text={paragraph}
              {size}
            />
            <List
              items={list}
              {size}
            />
            <Price
              value={price}
              {size}
            />
            <slot name="content" />
          </Element>
          <Buttons
            {size}
            {variant}
            {buttons}
          />
          <slot name="segment" />
        </Element>
        <Image {...image} />
        <Cards
          {size}
          {level}
          {cards}
        />
        <slot />
      </Element>
    </Element>
  )
}

<style is:global>
  @layer fulldev {
    .section {
      @apply w-full pb-28 pt-14 first:pt-0;

      .section-container {
        @apply max-w-screen px-gutter mx-auto w-full;
      }

      .section-segment {
        @apply gap-8 py-16;
      }

      .section-content {
        @apply max-w-screen-md gap-6;
      }

      &.panel {
        @apply px-gutter first:pt-gutter;

        .section-container {
          @apply bg-card overflow-hidden rounded-lg border;
        }
      }

      &.inset {
        .section-container {
          @apply px-0;
        }

        .section-segment {
          @apply px-gutter;
        }
      }

      &.structure-left {
        .section-container,
        .section-segment,
        .section-content {
          @apply flex flex-col items-start;
        }
      }

      &.structure-center {
        .section-container,
        .section-segment,
        .section-content {
          @apply flex flex-col items-center text-center;
        }
      }

      &.structure-split {
        .section-container {
          @apply grid auto-cols-fr gap-x-14 lg:grid-flow-col lg:items-center;
        }

        .section-segment,
        .section-content {
          @apply flex flex-col items-start;
        }
      }

      &.structure-spread {
        .section-container {
          @apply flex flex-col;
        }

        .section-segment {
          @apply flex w-full flex-row flex-wrap items-end justify-between;
        }
      }

      &.reverse {
        &:not(.structure-split) {
          .section-segment {
            @apply order-last;
          }
        }

        @media (min-width: 1024px) {
          .section-segment {
            @apply order-last;
          }
        }
      }
    }
  }
</style>
