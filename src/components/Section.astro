---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Button from 'fulldev-ui/components/Button.astro'
import Buttons from 'fulldev-ui/components/Buttons.astro'
import type Card from 'fulldev-ui/components/Card.astro'
import Cards from 'fulldev-ui/components/Cards.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Image from 'fulldev-ui/components/Image.astro'
import Writeup from 'fulldev-ui/components/Writeup.astro'

interface Props
  extends ComponentProps<typeof Element>,
    HTMLAttributes<'section'>,
    ComponentProps<typeof Writeup> {
  image?: ComponentProps<typeof Image>['src']
  position?: ComponentProps<typeof Image>['position']
  buttons?: ComponentProps<typeof Buttons>['buttons']
  button?: ComponentProps<typeof Button> | undefined
  variant?: ComponentProps<typeof Button>['variant']
  cards?: ComponentProps<typeof Cards>['cards']
  panel?: ComponentProps<typeof Card>['panel']
  pages?: CollectionEntry<'pages'>['data'][] | undefined
  records?: CollectionEntry<'records'>['data'][] | undefined
  structure?:
    | ComponentProps<typeof Cards>['structure']
    | 'column'
    | 'split'
    | 'spread'
}

const { cards, pages, records } = Astro.props
const hasCards = (pages || records || cards)?.filter(Boolean)

const {
  structure = hasCards ? 'grid' : 'column',
  align = 'start',
  level = 2,
  badge,
  tagline,
  rating,
  heading,
  text,
  list,
  icon,
  button,
  buttons,
  variant,
  panel,
  image,
  position,
  ...rest
} = Astro.props
---

<Element
  class:list="section"
  as="section"
  panel={!hasCards && panel}
  structure={hasCards ? 'column' : structure}
  {align}
  {...rest}
>
  <Element class:list="section-segment">
    <slot name="segment">
      <slot name="writeup">
        <Writeup
          {level}
          {rating}
          {badge}
          {tagline}
          {heading}
          {text}
          {list}
          {icon}
        />
      </slot>
      <slot name="buttons">
        <Button
          {variant}
          {...button}
        />
        <Buttons
          {variant}
          {buttons}
        />
      </slot>
    </slot>
  </Element>
  <slot>
    <Cards
      level={(level + 2) as any}
      structure={hasCards ? (structure as any) : undefined}
      position={hasCards ? position : undefined}
      {cards}
      {pages}
      {records}
      {panel}
      {position}
    />
    <Image
      position={hasCards ? undefined : position}
      src={image}
    />
  </slot>
</Element>

<style is:global lang="scss">
  @layer fulldev {
    .section {
      --inset-x: var(--gutter);
      --inset-y: var(--spacer);

      position: relative;
      align-items: flex-start;
      gap: var(--space-6) var(--space-7);
      padding: var(--inset-y) var(--inset-x);
      overflow: auto;

      .section-segment {
        display: flex;
        flex-direction: column;
        gap: var(--space-5);
        z-index: 1;
      }

      &.panel {
        --inset-x: min(var(--gutter), var(--spacer));

        margin: var(--spacer) var(--gutter);
        border: 1px solid var(--base-a6);
        border-radius: var(--radius-2);
        background-color: var(--base-2);
        overflow: hidden;
      }

      &.reverse {
        &:not(.structure-split) {
          .section-segment {
            order: 999;
          }
        }

        @media (min-width: 1024px) {
          .section-segment {
            order: 999;
          }
        }
      }

      &.structure-column {
        display: flex;
        flex-direction: column;

        &.align-center {
          align-items: center;

          .section-segment {
            align-items: center;
            text-align: center;
          }
        }
      }

      &.structure-split {
        display: grid;
        grid-template-columns: 1fr;
        width: 100%;

        @media (min-width: 1024px) {
          grid-auto-columns: 1fr;
          grid-auto-flow: column;
        }

        &.align-center {
          align-items: center;
        }
      }

      &.structure-spread {
        display: flex;
        flex-direction: column;

        .section-segment {
          flex-direction: row;
          justify-content: space-between;
          width: 100%;
        }

        &.align-center {
          .section-segment {
            align-items: center;

            .writeup {
              align-items: flex-start;
            }
          }
        }
      }
    }
  }
</style>
