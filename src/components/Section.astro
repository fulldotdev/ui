---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Button from 'fulldev-ui/components/Button.astro'
import Buttons from 'fulldev-ui/components/Buttons.astro'
import type Card from 'fulldev-ui/components/Card.astro'
import Cards from 'fulldev-ui/components/Cards.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Image from 'fulldev-ui/components/Image.astro'
import Writeup from 'fulldev-ui/components/Writeup.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props
  extends GlobalProps,
    HTMLAttributes<'section'>,
    ComponentProps<typeof Writeup> {
  image?: ComponentProps<typeof Image>['src']
  position?: ComponentProps<typeof Image>['position']
  buttons?: ComponentProps<typeof Buttons>['buttons']
  button?: ComponentProps<typeof Button> | undefined
  variant?: ComponentProps<typeof Button>['variant']
  cards?: ComponentProps<typeof Cards>['cards']
  panel?: ComponentProps<typeof Card>['panel']
  pages?: CollectionEntry<'pages'>['data'][] | undefined
  records?: CollectionEntry<'records'>['data'][] | undefined
  component?: string
  structure?:
    | ComponentProps<typeof Cards>['structure']
    | 'column'
    | 'split'
    | 'spread'
}

const { cards, pages, records } = Astro.props
const hasCards = (pages || records || cards)?.filter(Boolean)

const {
  structure = hasCards ? 'grid' : 'column',
  align = 'start',
  level = 2,
  size = 'md',
  badge,
  tagline,
  rating,
  heading,
  text,
  list,
  button,
  buttons,
  variant,
  panel,
  image,
  position,
  ...rest
} = Astro.props

const { component, ...props } = Astro.props

const allComponents = {
  ...import.meta.glob('../../**/*.astro'),
  ...import.meta.glob('/src/**/*.astro'),
}

const componentPath = Object.keys(allComponents).find(
  (path) => path.split('/').pop()?.split('.')[0] === component
)

const Component =
  componentPath && (await (allComponents[componentPath] as any)()).default
---

{
  Component ? (
    <Component {...props} />
  ) : (
    <Element
      class:list="section"
      as="section"
      panel={!hasCards && panel}
      structure={hasCards ? 'column' : structure}
      {align}
      {size}
      {...rest}
    >
      <Element class:list="section-segment">
        <slot name="segment">
          <slot name="writeup">
            <Writeup
              {level}
              {rating}
              {badge}
              {tagline}
              {heading}
              {text}
              {list}
            />
          </slot>
          <slot name="buttons">
            <Button
              {variant}
              {...button}
            />
            <Buttons
              {variant}
              {buttons}
            />
          </slot>
        </slot>
      </Element>
      <slot>
        <Cards
          level={(level + 2) as any}
          size={size === 'lg' ? 'md' : 'sm'}
          structure={hasCards ? (structure as any) : undefined}
          position={hasCards ? position : undefined}
          {cards}
          {pages}
          {records}
          {panel}
          {position}
        />
        <Image
          position={hasCards ? undefined : position}
          src={image}
        />
      </slot>
    </Element>
  )
}

<style is:global lang="scss">
  @layer fulldev {
    .section {
      --inset-top: 0px;
      --inset-left: var(--gutter);
      --inset-right: var(--gutter);
      --inset-bottom: var(--spacer);

      position: relative;
      align-items: flex-start;
      gap: var(--space-6) var(--space-7);
      padding: var(--spacer) var(--gutter);
      overflow: auto;

      .section-segment {
        display: flex;
        flex-direction: column;
        gap: var(--space-5);
        z-index: 1;
      }

      &.panel {
        margin: var(--spacer) var(--gutter);
        border: 1px solid var(--base-a6);
        border-radius: var(--radius-2);
        background-color: var(--base-2);
        padding: min(var(--gutter), var(--spacer));
        overflow: hidden;
      }

      &.reverse {
        --inset-top: var(--spacer);
        --inset-left: var(--gutter);
        --inset-right: var(--gutter);
        --inset-bottom: 0px;

        &:not(.structure-split) {
          .section-segment {
            order: 999;
          }
        }

        @media (min-width: 1024px) {
          .section-segment {
            order: 999;
          }
        }
      }

      &.structure-column {
        display: flex;
        flex-direction: column;

        &.align-center {
          align-items: center;

          .section-segment {
            align-items: center;
            text-align: center;
          }
        }
      }

      &.structure-split {
        display: grid;
        grid-template-columns: 1fr;
        width: 100%;

        @media (min-width: 1024px) {
          --inset-top: var(--spacer);
          --inset-left: 0px;
          --inset-right: var(--gutter);
          --inset-bottom: var(--spacer);

          grid-auto-columns: 1fr;
          grid-auto-flow: column;

          &.reverse {
            --inset-right: 0px;
            --inset-left: var(--gutter);
          }
        }

        &.align-center {
          align-items: center;
        }
      }

      &.structure-spread {
        display: flex;
        flex-direction: column;

        .section-segment {
          flex-direction: row;
          justify-content: space-between;
          width: 100%;
        }

        &.align-center {
          .section-segment {
            align-items: center;

            .writeup {
              align-items: flex-start;
            }
          }
        }
      }
    }
  }
</style>
