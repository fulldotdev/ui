---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Badge from 'fulldev-ui/components/Badge.astro'
import Button from 'fulldev-ui/components/Button.astro'
import Buttons from 'fulldev-ui/components/Buttons.astro'
import Card from 'fulldev-ui/components/Card.astro'
import Cards from 'fulldev-ui/components/Cards.astro'
import Image from 'fulldev-ui/components/Image.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Writeup from 'fulldev-ui/components/Writeup.astro'

type Props = HTMLAttributes<'section'> & {
  position?: 'background' | 'cover' | 'inset' | undefined
  buttons?: ComponentProps<typeof Button<'a'>>[] | undefined
  button?: ComponentProps<typeof Button<'a'>> | undefined
  cards?: ComponentProps<typeof Card<'a'>>[] | undefined
  badge?: string | ComponentProps<typeof Badge<'a'>> | undefined
  image?: ComponentProps<typeof Image>['src'] | undefined
  rating?: number | undefined
  pages?: CollectionEntry<'pages'>['data'][] | undefined
  records?: CollectionEntry<'records'>['data'][] | undefined
  heading?: string | undefined
  title?: string | undefined
  text?: string | undefined
  html?: string | undefined
  description?: string | undefined
  label?: string | undefined
  tagline?: string | undefined
  list?: string[] | undefined
  theme?: 'light' | 'dark' | undefined
  color?: 'base' | 'brand' | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  align?: 'start' | 'center' | 'end' | undefined
  level?: 1 | 2 | 3 | 4 | undefined
  space?: 'auto' | 'none' | undefined
  reverse?: boolean | undefined
  variant?: 'primary' | 'secondary' | 'tertiary' | undefined
  panel?: boolean | undefined
  structure?:
    | 'column'
    | 'split'
    | 'spread'
    | 'carousel'
    | 'grid'
    | 'masonry'
    | 'stack'
    | undefined
}

const {
  space = 'auto',
  structure = 'column',
  variant = 'secondary',
  align = 'start',
  level = 2,
  panel,
  position,
  label,
  heading,
  badge,
  title,
  text,
  list,
  html,
  tagline,
  description,
  buttons,
  image,
  rating,
  button,
  cards,
  pages,
  records,
  ...rest
} = Astro.props

const mergedCards = (pages || records || cards)?.filter(Boolean)
const hasCards = mergedCards && mergedCards?.length > 0
---

<Root
  class:list="section"
  as="section"
  panel={hasCards ? undefined : panel}
  structure={structure === 'split' || structure === 'spread'
    ? structure
    : 'column'}
  {align}
  {...rest}
>
  <Root class:list="section-segment">
    <slot name="segment">
      <slot name="writeup">
        <Writeup
          {level}
          {rating}
          {badge}
          {tagline}
          {heading}
          {text}
          {list}
        />
      </slot>
      <slot name="buttons">
        <Buttons {buttons} />
      </slot>
    </slot>
  </Root>
  <slot>
    <Cards
      structure={structure === 'carousel' ||
      structure === 'stack' ||
      structure === 'grid' ||
      structure === 'masonry'
        ? structure
        : undefined}
      cards={cards ?? pages ?? records}
      level={(level + 2) as any}
      {panel}
      {position}
    />
    <Image
      position={hasCards ? undefined : position}
      src={image}
    />
  </slot>
</Root>

<style is:global lang="scss">
  @layer fulldev {
    .section {
      --inset-x: var(--gutter);
      --inset-y: var(--spacer);

      position: relative;
      align-items: flex-start;
      padding: var(--inset-y) var(--inset-x);
      overflow: auto;

      &.panel {
        --inset-x: min(var(--gutter), var(--spacer));

        margin: var(--spacer) var(--gutter);
        border: 1px solid var(--base-a6);
        border-radius: var(--radius-2);
        background-color: var(--base-2);
        overflow: hidden;
      }

      &.reverse {
        &:not(.structure-split) {
          .section-segment {
            order: 999;
          }
        }

        @media (min-width: 1024px) {
          .section-segment {
            order: 999;
          }
        }
      }

      &.structure-column {
        display: flex;
        flex-direction: column;
        gap: var(--space-6);

        .section-segment {
          display: flex;
          flex-direction: column;
          gap: var(--space-5);
        }

        &.align-center {
          align-items: center;

          .section-segment {
            align-items: center;
            text-align: center;
          }
        }
      }

      &.structure-split {
        display: grid;
        grid-template-columns: 1fr;
        column-gap: var(--space-7);
        width: 100%;

        .section-segment {
          display: flex;
          flex-direction: column;
          align-items: flex-start;
          gap: var(--space-5);
        }

        &.align-center {
          align-items: center;
        }
      }

      &.structure-spread {
        display: flex;
        flex-direction: column;
        gap: var(--space-6);

        .section-segment {
          display: flex;
          justify-content: space-between;
          gap: var(--space-5);
          width: 100%;
        }

        &.align-center {
          align-items: flex-start;
        }
      }
    }
  }
</style>
