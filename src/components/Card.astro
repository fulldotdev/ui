---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import Button from 'fulldev-ui/components/Button.astro'
import Price from 'fulldev-ui/components/experimental/Price.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import Image from 'fulldev-ui/components/Image.astro'
import List from 'fulldev-ui/components/List.astro'
import Rating from 'fulldev-ui/components/Rating.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Spread from 'fulldev-ui/components/Spread.astro'
import Tagline from 'fulldev-ui/components/Tagline.astro'
import Text from 'fulldev-ui/components/Text.astro'
import Wrap from 'fulldev-ui/components/Wrap.astro'
import Badge from './Badge.astro'

type Props<As extends HTMLTag = 'a'> = Polymorphic<{ as: As }> & {
  ratio?: 'landscape' | 'portrait' | 'square' | number | undefined
  variant?: 'primary' | 'secondary' | 'tertiary' | undefined
  position?: 'background' | 'cover' | 'inset' | undefined
  align?: 'start' | 'center' | 'end' | undefined
  justify?: 'start' | 'center' | 'end' | undefined
  level?: 1 | 2 | 3 | 4 | 5 | 6 | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  radius?: 'auto' | 'none' | undefined
  frame?: 'panel' | 'none' | undefined
  color?: 'base' | 'brand' | undefined
  space?: 'auto' | 'none' | undefined
  mask?: 'sm' | 'md' | 'lg' | undefined
  image?: string | ComponentProps<typeof Image> | undefined
  images?: string[] | undefined
  button?: ComponentProps<typeof Button<'a'>> | undefined
  buttons?: ComponentProps<typeof Button<'a'>>[] | undefined
  badge?: string | ComponentProps<typeof Badge<'a'>> | undefined
  badges?: (string | ComponentProps<typeof Badge<'a'>>)[] | undefined
  rating?: number | ComponentProps<typeof Rating> | undefined
  price?: number | undefined
  icon?: string | undefined
  avatar?: string | undefined
  avatars?: string[] | undefined
  label?: string | undefined
  tagline?: string | undefined
  contrast?: boolean | undefined
  heading?: string | undefined
  title?: string | undefined
  description?: string | undefined
  html?: string | undefined
  text?: string | undefined
  list?: string[] | undefined
}

const {
  href,
  as = href ? 'a' : 'div',
  space = 'auto',
  frame = 'none',
  radius = 'auto',
  align = 'start',
  variant,
  level = 4,
  position,
  label,
  heading,
  title,
  tagline,
  text,
  html,
  description,
  list,
  buttons,
  badge,
  badges,
  ratio,
  image,
  images,
  rating,
  button,
  price,
  icon,
  avatar,
  mask,
  avatars,
  ...rest
} = Astro.props

const buttonVariant = (i: number) => {
  if (variant === 'primary' && i === 0) return 'primary'
  else if (variant === 'primary' && i === 1) return 'secondary'
  else if (variant === 'primary' && i > 1) return 'tertiary'
  else if (variant === 'secondary' && i === 0) return 'secondary'
  else if (variant === 'secondary' && i > 0) return 'tertiary'
  else if (variant === 'tertiary') return 'tertiary'
  else return 'tertiary'
}
---

<Root
  class:list="card"
  ratio={position === 'background' ? ratio : undefined}
  structure="column"
  {align}
  {href}
  {radius}
  {space}
  {frame}
  {as}
  {...rest}
>
  <Image
    {position}
    {mask}
    ratio={position === 'background' ? undefined : ratio}
    src={images?.[0]}
    {...typeof image === 'string' ? { src: image } : image}
  />
  <Icon name={icon} />
  <Rating
    color="brand"
    {avatars}
    {avatar}
    {label}
    {...typeof rating === 'number' ? { value: rating } : rating}
  />
  <Wrap>
    {
      [badge, ...(badges ?? [])].filter(Boolean)?.map((badge: any) => (
        <Badge
          color="base"
          {...(typeof badge === 'string' ? { html: badge } : badge)}
        />
      ))
    }
  </Wrap>
  <Tagline
    color="base"
    html={tagline}
  />
  <Spread>
    <Heading
      color="base"
      html={heading ?? title}
      {level}
    />
    <Price value={price} />
  </Spread>
  <Text
    color="base"
    contrast={position === 'background' && true}
    html={html || text || description}
  />
  <List
    color="base"
    contrast
    items={list}
  />
  <Wrap>
    {
      [button, ...(buttons ?? [])]
        .filter(Boolean)
        ?.map((button: any, i: number) => (
          <Button
            variant={buttonVariant(i)}
            {...button}
          />
        ))
    }
  </Wrap>
  <slot />
</Root>

<style is:global lang="scss">
  @layer fulldev {
    .card {
      --inset-top: var(--space-5);
      --inset-left: var(--space-5);
      --inset-right: var(--space-5);
      --inset-bottom: var(--space-5);

      position: relative;
      text-decoration: none;

      &[href] {
        cursor: pointer;

        > .root.image {
          transition: var(--transition);
        }

        &:hover {
          > .root.image {
            opacity: 0.8;
          }
        }
      }

      &.ratio-landscape {
        aspect-ratio: 4/3;
      }

      &.ratio-square {
        aspect-ratio: 1/1;
      }

      &.ratio-portrait {
        aspect-ratio: 3/4;
      }

      &.frame-fill {
        border-radius: 0 !important;
      }

      &.frame-panel {
        border: 1px solid var(--color-a6);
        background-color: var(--color-2);
        padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
          var(--inset-left);
        overflow: hidden;

        &[href]:hover {
          border: 1px solid var(--color-a7);
        }

        &.radius-none {
          border-radius: 0;
        }

        &.radius-auto {
          border-radius: var(--radius-2);
        }
      }

      > .image + * {
        margin-top: var(--space-5);
      }
    }
  }
</style>
