---
import Element from 'fulldev-ui/components/Element.astro'
import { scope } from 'simple:scope'
import Button from './Button.astro'
import Heading from './Heading.astro'
import Input from './Input.astro'
import Price from './Price.astro'

const { ...rest } = Astro.props
---

<RootElement>
  <Element
    data-target={scope('list')}
    class:list={'cart-list'}
    if={true}
    {...rest}
  />

  <template data-target={scope('template')}>
    <Element class="cart-list-card">
      <img class="image" />
      <Element class="cart-list-card-segment">
        <Element class="cart-list-card-content">
          <Heading
            if
            level={6}
          />
          <Price if />
        </Element>
        <Element class="cart-list-card-actions">
          <Input
            type="number"
            name="quantity"
            value={1}
            min={0}
          />
          <Button
            type="button"
            variant="outline"
            icon="trash"
            type="button"
          />
        </Element>
      </Element>
    </Element>
  </template>
</RootElement>

<script>
  import { $cart, removeItem, updateQuantity } from 'fulldev-ui/stores/cart.ts'
  import { formatPrice } from 'fulldev-ui/utils/cart'

  RootElement.ready(($) => {
    $cart.subscribe((items) => {
      const list = $('list')
      const template = $('template') as HTMLTemplateElement

      // list.innerHTML = ''
      items.forEach((item) => {
        const clone = template?.content.cloneNode(true) as HTMLElement
        const clonedCard = clone.querySelector('.cart-list-card') as HTMLElement
        const existingCard = list.querySelector(`[data-slug="${item.slug}"]`)
        const card = existingCard || (clonedCard as HTMLElement)
        const heading = card.querySelector('.heading') as HTMLElement
        const price = card.querySelector('.price') as HTMLElement
        const image = card.querySelector('.image') as HTMLImageElement
        const remove = card.querySelector('.button') as HTMLButtonElement
        const quantity = card.querySelector('.input') as HTMLInputElement

        card.dataset.slug = item.slug
        heading.textContent = item.title
        price.textContent = formatPrice(item.price)
        image.src = item.image

        remove.addEventListener('click', () => removeItem(item.slug))

        quantity.addEventListener('change', (e) => {
          console.log('blur')
          const target = e.target as HTMLInputElement
          const value = Number(target.value)
          updateQuantity(item.slug, value)
        })

        $('list').appendChild(clone)
      })
    })
  })
</script>

<style is:global>
  @layer fulldev {
    .cart-list {
      @apply flex flex-col text-foreground;

      .cart-list-card {
        @apply flex w-full gap-5;

        &:not(:first-child) {
          @apply mt-5 border-t pt-5;
        }
      }

      .image {
        @apply block h-auto w-24;
      }

      .cart-list-card-segment {
        @apply flex h-full w-full flex-col justify-between gap-4;
      }

      .cart-list-card-content,
      .cart-list-card-actions {
        @apply flex justify-between gap-2;
      }

      .input {
        @apply w-16;
      }
    }
  }
</style>
