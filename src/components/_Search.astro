---
import { Search as SearchComposite } from '@/components/composite/search'
import { getHref } from '@/lib/get-href'
import { getCollection } from 'astro:content'
import type { ComponentProps } from 'react'

interface Props extends ComponentProps<typeof SearchComposite> {}

const pages = await getCollection('pages')
const articles = await getCollection('articles')
const products = await getCollection('products')
const projects = await getCollection('projects')
const persons = await getCollection('persons')

function collectionToLinks(
  collection: typeof pages | typeof articles | typeof products | typeof projects | typeof persons
) {
  return collection.map((item) => ({
    text: item.data.title,
    href: getHref(item.collection, item.id),
  }))
}

const allGroups = [
  {
    heading: "Pagina's",
    links: collectionToLinks(pages),
  },
  {
    heading: 'Artikelen',
    links: collectionToLinks(articles),
  },
  {
    heading: 'Producten',
    links: collectionToLinks(products),
  },
  {
    heading: 'Projecten',
    links: collectionToLinks(projects),
  },
  {
    heading: 'Personen',
    links: collectionToLinks(persons),
  },
]

const { groups = allGroups, ...rest } = Astro.props
---

{
  groups && (
    <SearchComposite
      client:load
      groups={groups}
      {...rest}
    />
  )
}
