---
import type { ComponentProps } from 'astro/types'
import Button from 'fulldev-ui/components/Button.astro'
import Channel from 'fulldev-ui/components/Channel.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Link from 'fulldev-ui/components/Link.astro'
import Social from 'fulldev-ui/components/Social.astro'
import Text from 'fulldev-ui/components/Text.astro'
import Logo from 'fulldev-ui/components/experimental/Logo.astro'

interface Props extends ComponentProps<typeof Element> {
  screen?: number | undefined
  logo?: string | undefined
  heading?: string | undefined
  title?: string | undefined
  description?: string | undefined
  hours?: any
  text?: string | undefined
  socials?: (string | ComponentProps<typeof Social>)[] | undefined
  buttons?: ComponentProps<typeof Button<'a'>>[] | undefined
  html?: string | undefined
  panel?: boolean | undefined
  channels?: any
  columns?: {
    heading: string | undefined
    links: ComponentProps<typeof Link<'a'>>[] | undefined
  }[]
}

const {
  as = 'footer',
  space = 'auto',
  size = 'sm',
  screen = 1280,
  hours,
  panel,
  logo,
  socials,
  heading,
  buttons,
  columns,
  text,
  title,
  description,
  channels,
  html,
  ...rest
} = Astro.props
---

<Element
  class:list="footer"
  style={{ '--screen': `${screen}px` }}
  structure="stack"
  {as}
  {panel}
  {space}
  {size}
  {...rest}
>
  <Element class:list="column">
    <Logo {logo} />
    <Text
      color="base"
      html={html || text || description}
    />
    <Element class:list="socials">
      {
        socials?.map((social) => (
          <Social
            {...(typeof social === 'string' ? { href: social } : social)}
          />
        ))
      }
    </Element>
  </Element>

  <Element
    space="none"
    class:list="channels column"
  >
    {
      channels?.map((channel: any) => (
        <Channel
          heading={channel.heading}
          text={channel.text}
          icon={channel.icon}
          href={channel.href}
        />
      ))
    }
  </Element>

  <Element
    class:list="hours column"
    space="none"
  >
    <Heading
      html={hours?.heading}
      level={5}
    />
    <Element space="none">
      {
        Object.entries(hours?.days ?? {})?.map(([key, value]: any) => (
          <Element class:list="spread">
            <Text text={key} />
            <Text text={value} />
          </Element>
        ))
      }
    </Element>
  </Element>

  <Element class:list="buttons column">
    {
      columns?.map(({ heading, buttons }: any) => (
        <Element>
          <Heading
            level={5}
            html={heading}
          />
          {buttons?.map((button: any) => (
            <Button
              variant="link"
              {...button}
            />
          ))}
        </Element>
      ))
    }
  </Element>
</Element>

<style is:global lang="scss">
  @layer fulldev {
    .footer {
      position: relative;
      margin-top: auto;
      border-top-width: 1px;
      border-color: var(--base-a6);
      background-color: var(--base-2);
      padding: var(--space-7) var(--gutter);
      width: 100%;
      overflow: auto;

      .spread {
        display: flex;
        justify-content: space-between;
      }

      .column {
        display: flex;
        flex-direction: column;
      }

      .socials {
        display: flex;
      }

      .column {
        h5 + * {
          margin-top: var(--space-4);
        }

        .button.variant-link + .button.variant-link {
          margin-top: var(--space-4);
        }
      }

      &.panel {
        margin: var(--spacer) var(--gutter);
        border-width: 1px;
        border-radius: var(--radius-2);
        overflow: hidden;
      }

      .channels {
        gap: var(--space-3);
      }

      .buttons {
        display: grid;
        position: relative;
        grid-template-columns: 1fr;
        align-items: flex-start;
        gap: var(--space-3);
        gap: var(--space-6);
        width: 100%;

        @media (min-width: 1024px) {
          grid-auto-columns: 1fr;
          grid-auto-flow: column;
        }
      }

      .text {
        max-width: calc(5 * var(--space-7));
      }

      .hours {
        .column {
          gap: 0;

          .text {
            font-size: var(--text-2);
          }
        }
      }
    }
  }
</style>
