---
import type { HTMLAttributes } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'

interface Props extends HTMLAttributes<'ul' | 'ol'> {
  as?: 'ul' | 'ol' | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  items?: string[] | undefined
  muted?: boolean | undefined
  icon?: string | undefined
}

const { as = 'ul', items, icon, ...rest } = Astro.props
---

<Element
  class:list={['list', icon ? 'has-icon' : undefined]}
  {as}
  {...rest}
>
  {
    items?.map((item) => (
      <Element as="li">
        <Icon name={icon} />
        <Element as="span">
          <Fragment set:html={item} />
        </Element>
      </Element>
    ))
  }
  <slot />
</Element>

<style is:global>
  @layer fulldev {
    .list,
    .prose :is(ul, ol) {
      @apply pl-4;

      &:is(ul) {
        @apply list-disc;
      }

      ul {
        @apply ml-5 mt-2 list-disc;
      }

      &:is(ol) {
        @apply list-decimal;
      }

      ol {
        @apply ml-5 mt-2 list-decimal;
      }

      li {
        @apply mt-2 first:mt-0;
      }

      &.size-sm,
      &:where(.size-sm &) {
        @apply text-sm;

        .icon {
          @apply mt-0;
        }
      }

      &.size-lg,
      &:where(.size-lg &) {
        @apply text-lg;

        .icon {
          @apply mt-1;
        }
      }

      &.muted {
        @apply text-muted-foreground;
      }

      .icon {
        @apply -ml-5 mt-0.5 shrink-0 text-inherit;
      }

      &.has-icon {
        @apply ml-0 list-none;

        li {
          @apply flex gap-2;
        }
      }
    }
  }
</style>
