---
import type { ComponentProps, HTMLAttributes } from "astro/types"

import { cn } from "@/lib/utils"
import Button from "@/components/elements/button.astro"
import Checkbox from "@/components/elements/checkbox.astro"
import FieldContent from "@/components/elements/field-content.astro"
import FieldDescription from "@/components/elements/field-description.astro"
import FieldLabel from "@/components/elements/field-label.astro"
import FieldSet from "@/components/elements/field-set.astro"
import Field from "@/components/elements/field.astro"
import Input from "@/components/elements/input.astro"
import RadioGroupItem from "@/components/elements/radio-group-item.astro"
import RadioGroup from "@/components/elements/radio-group.astro"
import SelectItem from "@/components/elements/select-item.astro"
import Select from "@/components/elements/select.astro"
import Textarea from "@/components/elements/textarea.astro"

type Field = {
  label?: string
  description?: string
} & (
  | (ComponentProps<typeof Textarea> & {
      type: "textarea"
    })
  | (ComponentProps<typeof Checkbox> & {
      type: "checkbox"
    })
  | (ComponentProps<typeof Select> & {
      type: "select"
      options: string[]
      placeholder?: string
    })
  | (ComponentProps<typeof RadioGroupItem> & {
      type: "radio-group"
      options: string[]
    })
  | (ComponentProps<typeof Input> & {
      type: "text" | "tel" | "email" | "number"
    })
)

interface Props extends HTMLAttributes<"form"> {
  inbox?: string
  fields?: Field[]
  submit?: string
}

const { class: className, inbox, fields, submit, ...props } = Astro.props
---

<form
  method="POST"
  data-netlify="true"
  class={cn("flex w-full max-w-2xl flex-col gap-6", className)}
  {...props}
>
  {
    fields?.map(({ label, description, name = label, id = name, ...field }) => {
      switch (field.type) {
        case "textarea":
          return (
            <Field>
              <FieldLabel for={id}>{label}</FieldLabel>
              <Textarea id={id} name={name} {...field} />
              <FieldDescription>{description}</FieldDescription>
            </Field>
          )
        case "select":
          const { options: selectOptions, placeholder, ...select } = field
          return (
            <Field>
              <FieldLabel for={id}>{label}</FieldLabel>
              <Select id={id} name={name} {...select}>
                <SelectItem
                  value={placeholder}
                  id={placeholder}
                  disabled
                  selected
                  class="text"
                >
                  {placeholder}
                </SelectItem>
                {selectOptions?.map((option) => (
                  <SelectItem value={option} id={option}>
                    {option}
                  </SelectItem>
                ))}
              </Select>
              <FieldDescription>{description}</FieldDescription>
            </Field>
          )
        case "checkbox":
          return (
            <Field orientation="horizontal">
              <Checkbox id={id} name={name} {...field} />
              <FieldContent>
                <FieldLabel for={id}>{label}</FieldLabel>
                <FieldDescription>{description}</FieldDescription>
              </FieldContent>
            </Field>
          )
        case "radio-group":
          const { options: radioOptions, ...radioGroup } = field
          return (
            <FieldSet>
              <FieldLabel>{label}</FieldLabel>
              <FieldDescription>{description}</FieldDescription>
              <RadioGroup {...radioGroup}>
                {radioOptions?.map((option) => (
                  <Field orientation="horizontal">
                    <RadioGroupItem value={option} id={option} name={name} />
                    <FieldLabel for={option}>{option}</FieldLabel>
                  </Field>
                ))}
              </RadioGroup>
              <FieldDescription>{description}</FieldDescription>
            </FieldSet>
          )
        default:
          return (
            <Field>
              <FieldLabel for={id}>{label}</FieldLabel>
              <Input id={id} name={name} {...field} />
              <FieldDescription>{description}</FieldDescription>
            </Field>
          )
      }
    })
  }
  <slot />
  {inbox && <input type="hidden" name="inbox_key" value={inbox} />}
  <input type="text" name="_gotcha" class="hidden" />
  <input type="text" name="Pagina" class="hidden" value={Astro.url.pathname} />
  <Button type="submit">{submit}</Button>
</form>
