---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Root from 'fulldev-ui/components/Root.astro'
import Card from './Card.astro'

type Props = HTMLAttributes<'div'> & {
  structure?: 'grid' | 'masonry' | 'stack' | 'carousel' | undefined
  color?: 'base' | 'brand' | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  contrast?: boolean | undefined
  panel?: boolean | undefined
  level?: 1 | 2 | 3 | 4 | 5 | 6 | undefined
  position?: 'background' | 'cover' | 'inset' | undefined
  cards?: ComponentProps<typeof Card>[] | undefined
  pages?: CollectionEntry<'pages'>['data'][] | undefined
  records?: CollectionEntry<'records'>['data'][] | undefined
}

const {
  structure,
  color,
  size,
  cards,
  contrast,
  level,
  panel,
  position,
  pages,
  records,
  ...rest
} = Astro.props
---

<Root
  class:list="cards"
  {structure}
  {color}
  {size}
  {panel}
  {contrast}
  {...rest}
>
  {
    (cards || pages || records)?.map((card) => (
      <Card
        {panel}
        {level}
        {position}
        {...card}
      />
    ))
  }
</Root>

<style is:global lang="scss">
  @layer fulldev {
    .cards {
      --column-width: calc(21 * var(--space-4));
      --gap: var(--space-5);

      position: relative;
      width: 100%;

      &.panel {
        --gap: var(--space-4);
      }

      &.position-inset {
        margin-right: calc(var(--inset-right) * -1);
        margin-left: calc(var(--inset-left) * -1);
        padding-right: var(--inset-right);
        padding-left: var(--inset-left);
        width: calc(100% + var(--inset-left) + var(--inset-right));
      }

      &.structure-grid {
        display: grid;
        grid-template-columns: repeat(
          auto-fill,
          minmax(var(--column-width), 1fr)
        );
        gap: var(--gap);
        width: 100%;
      }

      &.structure-masonry {
        column-gap: var(--gap);
        column-fill: balance;
        column-width: var(--column-width);
        column-count: 6;
        break-inside: avoid;
        width: 100%;

        & > .root + .root,
        & > * + * {
          break-inside: avoid;
          margin-top: var(--gap);
          margin-bottom: var(--gap);
        }
      }

      &.structure-carousel {
        display: flex;
        align-items: flex-start;
        gap: var(--gap);
        padding-bottom: var(--gap);
        overflow-x: auto;
        scroll-behavior: smooth;
        scroll-snap-type: x mandatory;

        > .root {
          flex-grow: 0;
          flex-shrink: 0;
          width: var(--column-width);
          scroll-snap-align: center;
        }
      }

      &.structure-stack {
        display: grid;
        position: relative;
        grid-template-columns: 1fr;
        align-items: flex-start;
        gap: var(--space-6);
        width: 100%;

        @media (min-width: 1024px) {
          grid-auto-columns: 1fr;
          grid-auto-flow: column;
        }
      }
    }
  }
</style>
