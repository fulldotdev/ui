---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import Card from 'fulldev-ui/components/Card.astro'
import Element from 'fulldev-ui/components/Element.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props extends GlobalProps, HTMLAttributes<'div'> {
  level?: ComponentProps<typeof Card>['level']
  panel?: ComponentProps<typeof Card>['panel']
  position?: ComponentProps<typeof Card>['position']
  cards?: ComponentProps<typeof Card>[] | undefined
  structure?: 'grid' | 'masonry' | 'stack' | 'carousel' | 'bento' | undefined
}

const {
  structure = 'grid',
  level,
  panel,
  position,
  cards,
  size,
  ...rest
} = Astro.props
---

<Element
  class:list="cards"
  {panel}
  {size}
  {structure}
  {...rest}
>
  {
    cards?.map((card: any) => (
      <Card
        level={level + 3}
        {panel}
        {size}
        {position}
        {...card}
      />
    ))
  }
</Element>

<style is:global>
  @layer fulldev {
    .cards {
      --column-width: 20rem;
      @apply relative w-full;

      &.structure-grid {
        @apply grid w-full grid-cols-[repeat(auto-fill,minmax(var(--column-width),1fr))] gap-5;
      }

      &.structure-masonry {
        @apply w-full columns-6 break-inside-avoid gap-5 space-y-5;
        column-fill: balance;
        column-width: var(--column-width);

        /* & > * + * {
          break-inside: avoid;
          margin-top: var(--gap);
          margin-bottom: var(--gap);
        } */
      }

      &.structure-carousel {
        display: flex;
        align-items: flex-start;
        gap: var(--gap);
        padding-bottom: var(--gap);
        overflow-x: auto;
        scroll-behavior: smooth;
        scroll-snap-type: x mandatory;

        > * {
          flex-grow: 0;
          flex-shrink: 0;
          width: var(--column-width);
          scroll-snap-align: center;
        }
      }

      &.structure-stack {
        display: grid;
        position: relative;
        grid-template-columns: 1fr;
        align-items: flex-start;
        gap: var(--space-6);
        width: 100%;

        @media (min-width: 1024px) {
          grid-auto-columns: 1fr;
          grid-auto-flow: column;
        }
      }

      &.structure-bento {
        display: grid;
        position: relative;
        grid-template-columns: 1fr;
        gap: var(--space-4);
        width: 100%;

        @media (min-width: 1024px) {
          grid-template-columns: repeat(5, 1fr);

          & > * {
            grid-column: span 2;
          }

          & > *:nth-child(3n + 2),
          & > *:nth-child(3n + 3) {
            grid-column: span 3;
          }
        }
      }

      &.size-sm {
        --column-width: 16rem;
      }

      &.size-md {
        --column-width: 20rem;
      }

      &.size-lg {
        --column-width: 26rem;
      }
    }
  }
</style>
