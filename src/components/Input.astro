---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import Label from 'fulldev-ui/components/Label.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props extends GlobalProps, HTMLAttributes<'input'> {
  label?: ComponentProps<typeof Label>['text']
  icon?: ComponentProps<typeof Icon>['name']
}

const {
  placeholder,
  name = placeholder,
  type = 'text',
  label,
  icon,
  ...rest
} = Astro.props
---

<Element
  class:list="input"
  {...rest}
>
  <Label
    for={name}
    text={label}
  />
  <Element
    as="input"
    if={name}
    id={name}
    {name}
    {placeholder}
    {type}
    {...rest}
  />
  <Icon name={icon} />
</Element>

<style is:global lang="scss">
  @layer fulldev {
    .input {
      display: flex;
      position: relative;
      flex-direction: column;
      gap: var(--space-1);
      width: 100%;

      .icon {
        position: absolute;
        right: var(--space-4);
        bottom: var(--space-4);
        pointer-events: none;
      }

      input {
        display: flex;
        position: relative;
        align-items: center;
        outline: none;
        border: 1px solid var(--color-6);
        border-radius: var(--radius-1);
        background-color: transparent;
        padding: var(--space-4);
        padding-right: calc(var(--text-2) + 2 * var(--space-4));
        width: 100%;
        min-width: var(--space-4);
        height: calc(var(--text-2) + 2 * var(--space-4));
        color: var(--text);
        font-size: var(--text-2);
        line-height: 1.25;

        &::placeholder {
          color: var(--color-11);
        }

        &:hover {
          outline: none;
        }

        &:focus {
          outline: none;
          box-shadow: inset 0 0 0 2px var(--color-7);
          border-color: var(--color-7);
        }

        &:disabled {
          opacity: 50%;
          cursor: not-allowed;
          pointer-events: none;
        }

        &[readonly] {
          pointer-events: none;
        }
      }
    }
  }
</style>
