---
import type { ComponentProps } from 'astro/types'
import Avatar from 'fulldev-ui/components/Avatar.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import Label from 'fulldev-ui/components/Label.astro'

interface Props extends ComponentProps<typeof Element> {
  align?: 'start' | 'center' | 'end' | undefined
  value?: number | undefined
  label?: string | undefined
  avatars?: string[] | undefined
  avatar?: string | undefined
}

const { value, label, avatars, avatar, align, ...rest } = Astro.props

const getIcon = (count: number) => {
  if (!value) return
  const difference = value - count
  if (difference >= -0.25) return 'star-filled'
  if (difference >= -0.75) return 'star-half-filled'
  return 'star'
}

const hasAvatars = avatars && avatars?.length > 0
---

<Element
  class:list="rating"
  {...rest}
>
  {
    [avatar, ...(avatars ?? [])]
      ?.filter(Boolean)
      ?.map((avatar) => <Avatar src={avatar} />)
  }
  <Element
    class:list="column"
    align={!hasAvatars ? align : undefined}
  >
    <Element
      class:list={'stars'}
      {...rest}
    >
      {
        value &&
          [1, 2, 3, 4, 5].map((_, i) => (
            <Icon
              name={getIcon(i + 1)}
              class:list={'rating-icon-solid'}
            />
          ))
      }
    </Element>
    <Label
      color="base"
      html={label}
    />
  </Element>
</Element>

<style is:global lang="scss">
  @layer fulldev {
    .rating {
      display: flex;
      align-items: center;
      gap: var(--space-4);

      .column {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
      }

      .avatar + .avatar {
        margin-left: calc(var(--space-4) * -2.5);
      }

      .label {
        margin-top: var(--space-2) !important;
      }

      .stars {
        display: flex;
        align-items: center;
        gap: var(--space-2);
      }
    }
  }
</style>
