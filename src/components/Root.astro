---
import type { HTMLTag } from 'astro/types'

type Props<As extends HTMLTag> = {
  as?: As
  slot?: any
  if?: 'content' | any
  [key: string | number | symbol]: any
}

const {
  as: As = 'div',
  if: ifProp = 'content',
  space,
  theme,
  variant,
  density,
  size,
  align,
  justify,
  color,
  position,
  panel,
  contrast,
  structure,
  text,
  html,
  level,
  reverse,
  lead,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasContent = (str?: undefined | string) =>
  typeof str === 'string' && str.trim().length > 0
const render =
  ifProp == 'content'
    ? hasContent(slot) || hasContent(html) || hasContent(text)
    : ifProp
---

{
  render && (
    <As
      class:list={[
        'root',
        structure,
        {
          lead,
          contrast,
          panel,
          [`theme-${theme}`]: theme,
          [`level-${level}`]: level,
          [`variant-${variant}`]: variant,
          [`structure-${structure}`]: structure,
          [`size-${size}`]: size,
          [`align-${align}`]: align,
          [`justify-${justify}`]: justify,
          [`position-${position}`]: position,
          [`color-${color}`]: color,
          [`space-${space}`]: space,
          [`reverse-${reverse}`]: reverse,
        },
      ]}
      {...rest}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global lang="scss">
  @import '@unocss/reset/tailwind.css' layer(fulldev);
  @import '../css/color.css';
  @import '../css/styles.css';
  @import '../css/size.css';
  @import '../css/space.css';
</style>
