---
import type { ComponentProps } from "astro/types"

import { cn } from "@/lib/utils"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import Button from "@/components/ui/button.astro"
import SectionActions from "@/components/ui/section-actions.astro"
import SectionContainer from "@/components/ui/section-container.astro"
import SectionContent from "@/components/ui/section-content.astro"
import SectionStack from "@/components/ui/section-stack.astro"
import Section from "@/components/ui/section.astro"
import Typography from "@/components/ui/typography.astro"

interface Props extends ComponentProps<typeof Section> {
  buttons?: ComponentProps<typeof Button>[]
  faqs?: {
    question?: string
    answer?: string
  }[]
}

const { class: className, align, size, buttons, faqs, ...props } = Astro.props
---

<Section class={cn("", className)} size={size} align={align} {...props}>
  <SectionContainer class="max-w-screen-md">
    <SectionStack align={align}>
      <SectionContent align={align}>
        <Typography size={size} align={align}>
          <slot />
        </Typography>
        <SectionActions align={align}>
          {
            buttons?.map((button, i) => (
              <Button
                variant={i === 0 ? "default" : "outline"}
                size={size}
                {...button}
              />
            ))
          }
        </SectionActions>
      </SectionContent>
      {
        faqs && faqs.length > 0 && (
          <Accordion class="w-full max-w-2xl">
            {faqs?.map(({ question, answer }) => {
              if (!question && !answer) return null
              return (
                <AccordionItem>
                  <AccordionTrigger>{question}</AccordionTrigger>
                  <AccordionContent>{answer}</AccordionContent>
                </AccordionItem>
              )
            })}
          </Accordion>
        )
      }
    </SectionStack>
  </SectionContainer>
</Section>
