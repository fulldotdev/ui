---
import type { ComponentProps } from "astro/types"
import MenuIcon from "lucide-static/icons/menu.svg"

import { cn } from "@/lib/utils"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { Button } from "@/components/ui/button"
import { Header, HeaderActions, HeaderContainer } from "@/components/ui/header"
import { Icon } from "@/components/ui/icon"
import { Logo } from "@/components/ui/logo"
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
} from "@/components/ui/navigation-menu"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"

interface Props extends ComponentProps<typeof Header> {
  align?: "start" | "center" | "end"
  logo?: ComponentProps<typeof Logo>
  buttons?: ComponentProps<typeof Button>[]
  socials?: string[]
  menus?: {
    text?: string
    href?: string
    links?: {
      text?: string
      href?: string
    }[]
  }[]
}

const {
  class: className,
  align,
  logo,
  menus,
  buttons,
  socials,
  ...props
} = Astro.props
---

<Header
  class={cn("sticky top-0 z-50 flex h-14 items-center", className)}
  {...props}
>
  <HeaderContainer class="flex justify-between gap-8">
    <Logo href="/" {...logo} />
    <NavigationMenu class={cn("first:-ml-2 max-lg:hidden")}>
      <NavigationMenuList>
        {
          menus?.map((menu) => (
            <NavigationMenuItem>
              {menu.links && menu.links.length > 0 ? (
                <>
                  <NavigationMenuTrigger href={menu.href}>
                    {menu.text}
                  </NavigationMenuTrigger>
                  <NavigationMenuContent>
                    <ul class="flex min-w-[200px] flex-col gap-2">
                      {menu.links?.map((link) => (
                        <li class="w-full">
                          <NavigationMenuLink
                            class="flex w-full justify-start text-start"
                            href={link.href}
                          >
                            {link.text}
                          </NavigationMenuLink>
                        </li>
                      ))}
                    </ul>
                  </NavigationMenuContent>
                </>
              ) : (
                <NavigationMenuLink variant="trigger" href={menu.href}>
                  {menu.text}
                </NavigationMenuLink>
              )}
            </NavigationMenuItem>
          ))
        }
      </NavigationMenuList>
    </NavigationMenu>
    <div class="flex justify-end gap-4">
      <HeaderActions class="max-sm:hidden">
        {
          socials?.map((social) => (
            <Button variant="ghost" size="icon" href={social}>
              <Icon href={social} />
            </Button>
          ))
        }
      </HeaderActions>
      <HeaderActions class="max-sm:hidden">
        {
          buttons?.map((button, i) => (
            <Button
              variant={i === buttons.length - 1 ? "default" : "ghost"}
              {...button}
            />
          ))
        }
      </HeaderActions>
      <Sheet class="lg:hidden">
        <SheetTrigger variant="ghost" size="icon">
          <MenuIcon class="size-6" />
        </SheetTrigger>
        <SheetContent class="overflow-y-auto px-4 py-8">
          <Accordion class="flex w-full flex-col">
            {
              menus?.map((menu) => (
                <AccordionItem>
                  {menu.links && menu.links.length > 0 ? (
                    <>
                      <AccordionTrigger class="text-base font-medium hover:no-underline">
                        {menu.href ? (
                          <a href={menu.href}>{menu.text}</a>
                        ) : (
                          <span>{menu.text}</span>
                        )}
                      </AccordionTrigger>
                      <AccordionContent class="flex flex-col gap-4 pb-6">
                        {menu.links?.map((link) => (
                          <a
                            class="text-muted-foreground flex text-base"
                            href={link.href}
                          >
                            {link.text}
                          </a>
                        ))}
                      </AccordionContent>
                    </>
                  ) : (
                    <a class="flex py-4 text-base font-medium" href={menu.href}>
                      {menu.text}
                    </a>
                  )}
                </AccordionItem>
              ))
            }
          </Accordion>
          {
            buttons && buttons.length > 0 && (
              <div class="mt-6 flex w-full flex-col gap-2">
                {buttons?.map((button, i) => (
                  <Button
                    variant={i === buttons.length - 1 ? "default" : "ghost"}
                    {...button}
                  />
                ))}
              </div>
            )
          }
          {
            socials && socials.length > 0 && (
              <div class="mx-auto mt-6 flex gap-2">
                {socials?.map((social) => (
                  <Button variant="ghost" size="icon" href={social}>
                    <Icon href={social} />
                  </Button>
                ))}
              </div>
            )
          }
        </SheetContent>
      </Sheet>
    </div>
  </HeaderContainer>
</Header>
