---
import { Collections1 } from "@/blocks/collections-1"
import { Contact1 } from "@/blocks/contact-1"
import { Contact2 } from "@/blocks/contact-2"
import { Content1 } from "@/blocks/content-1"
import { Cta1 } from "@/blocks/cta-1"
import { Faqs1 } from "@/blocks/faqs-1"
import { Faqs2 } from "@/blocks/faqs-2"
import { Features1 } from "@/blocks/features-1"
import { Hero1 } from "@/blocks/hero-1"
import { Hero2 } from "@/blocks/hero-2"
import { Hero3 } from "@/blocks/hero-3"
import { Locations1 } from "@/blocks/locations-1"
import { Media1 } from "@/blocks/media-1"
import { Media2 } from "@/blocks/media-2"
import { Pages1 } from "@/blocks/pages-1"
import { Persons1 } from "@/blocks/persons-1"
import { Posts1 } from "@/blocks/posts-1"
import { Pricings1 } from "@/blocks/pricings-1"
import { Products1 } from "@/blocks/products-1"
import { Reviews1 } from "@/blocks/reviews-1"
import { getCollection, getEntries } from "astro:content"
import type { AnyEntryMap } from "astro:content"

import { getHref } from "@/lib/get-href"

type Props = any

let {
  type,
  variant = 1,
  pages,
  posts,
  products,
  projects,
  persons,
  collections,
  reviews,
  locations,
  ...props
} = Astro.props

async function getRightEntries(
  collection: keyof AnyEntryMap,
  references: Parameters<typeof getEntries>[0] | undefined
) {
  if (!references) return await getCollection(collection)
  else return await getEntries(references)
}

function mapEntries(entries: any[] | undefined) {
  if (!entries) return []
  return entries.filter(Boolean).map((entry) => ({
    href: getHref(entry.collection, entry.id),
    image: "images" in entry.data ? entry.data.images?.[0] : undefined,
    ...entry.data,
  }))
}

const pageEntries = await getRightEntries("pages", pages)
const collectionEntries = await getRightEntries("collections", collections)
const locationEntries = await getRightEntries("locations", locations)
const personEntries = await getRightEntries("persons", persons)
const postEntries = await getRightEntries("posts", posts)
const productEntries = await getRightEntries("products", products)
const projectEntries = await getRightEntries("projects", projects)
const reviewEntries = await getRightEntries("reviews", reviews)

if (type === "pages") {
  console.log({
    pageEntries,
  })
}
---

{
  type === "posts" && variant === 1 && (
    <Posts1 posts={mapEntries(postEntries)} {...props} />
  )
}

{
  type === "projects" && variant === 1 && (
    <Posts1 posts={mapEntries(projectEntries)} {...props} />
  )
}

{
  type === "pages" && variant === 1 && (
    <Pages1 pages={mapEntries(pageEntries)} {...props} />
  )
}

{
  type === "products" && variant === 1 && (
    <Products1 products={mapEntries(productEntries)} {...props} />
  )
}
{
  type === "persons" && variant === 1 && (
    <Persons1 persons={mapEntries(personEntries)} {...props} />
  )
}
{
  type === "collections" && variant === 1 && (
    <Collections1 collections={mapEntries(collectionEntries)} {...props} />
  )
}
{
  type === "reviews" && variant === 1 && (
    <Reviews1 reviews={mapEntries(reviewEntries)} {...props} />
  )
}
{
  type === "locations" && variant === 1 && (
    <Locations1 locations={mapEntries(locationEntries)} {...props} />
  )
}

{type === "contact" && variant === 1 && <Contact1 {...props} />}
{type === "contact" && variant === 2 && <Contact2 {...props} />}

{type === "content" && variant === 1 && <Content1 {...props} />}

{type === "cta" && variant === 1 && <Cta1 {...props} />}

{type === "faqs" && variant === 1 && <Faqs1 client:load {...props} />}
{type === "faqs" && variant === 2 && <Faqs2 client:load {...props} />}

{type === "features" && variant === 1 && <Features1 {...props} />}

{type === "hero" && variant === 1 && <Hero1 {...props} />}
{type === "hero" && variant === 2 && <Hero2 {...props} />}
{type === "hero" && variant === 3 && <Hero3 {...props} />}

{type === "media" && variant === 1 && <Media1 {...props} />}
{type === "media" && variant === 2 && <Media2 {...props} />}

{type === "pricings" && variant === 1 && <Pricings1 {...props} />}
