---
import { Article1 } from "@/blocks/article-1"
import { Articles1 } from "@/blocks/articles-1"
import { Collection1 } from "@/blocks/collection-1"
import { Collections1 } from "@/blocks/collections-1"
import { Contact1 } from "@/blocks/contact-1"
import { Contact2 } from "@/blocks/contact-2"
import { Content1 } from "@/blocks/content-1"
import { Content2 } from "@/blocks/content-2"
import { Cta1 } from "@/blocks/cta-1"
import { Faqs1 } from "@/blocks/faqs-1"
import { Faqs2 } from "@/blocks/faqs-2"
import { Features1 } from "@/blocks/features-1"
import { Footer1 } from "@/blocks/footer-1"
import { Header1 } from "@/blocks/header-1"
import { Header2 } from "@/blocks/header-2"
import { Hero1 } from "@/blocks/hero-1"
import { Hero2 } from "@/blocks/hero-2"
import { Hero3 } from "@/blocks/hero-3"
import { Locations1 } from "@/blocks/locations-1"
import { Page1 } from "@/blocks/page-1"
import { Pages1 } from "@/blocks/pages-1"
import { Person1 } from "@/blocks/person-1"
import { Persons1 } from "@/blocks/persons-1"
import { Product1 } from "@/blocks/product-1"
import { Products1 } from "@/blocks/products-1"
import { Project1 } from "@/blocks/project-1"
import { Projects1 } from "@/blocks/projects-1"
import { Reviews1 } from "@/blocks/reviews-1"
import { getCollection, getEntries } from "astro:content"
import { marked } from "marked"

import { getHref } from "@/lib/get-href"

interface Props {
  entryId?: string
  type?: string
  variant?: number
  content?: string
  pages?: any[]
  articles?: any[]
  products?: any[]
  projects?: any[]
  persons?: any[]
  collections?: any[]
  reviews?: any[]
  locations?: any[]
}

let {
  entryId,
  type,
  variant = 1,
  content,
  pages,
  articles,
  products,
  projects,
  persons,
  collections,
  reviews,
  locations,
  ...rest
} = Astro.props

const pageEntries = pages
  ? await getEntries(pages)
  : await getCollection("pages")
const articleEntries = articles
  ? await getEntries(articles)
  : await getCollection("articles")
const productEntries = products
  ? await getEntries(products)
  : await getCollection("products")
const projectEntries = projects
  ? await getEntries(projects)
  : await getCollection("projects")
const personEntries = persons
  ? await getEntries(persons)
  : await getCollection("persons")
const reviewEntries = reviews
  ? await getEntries(reviews)
  : await getCollection("reviews")
const collectionEntries = collections
  ? await getEntries(collections)
  : await getCollection("collections")
const locationEntries = locations
  ? await getEntries(locations)
  : await getCollection("locations")

const productInCollectionEntries = productEntries?.filter((product) =>
  product?.data.collections?.find((c) => {
    if (typeof c === "string") return false
    if ("id" in c) return c.id === entryId
    if ("slug" in c) return c.slug === entryId
    return false
  })
)
const mapEntries = (
  entries:
    | typeof pageEntries
    | typeof articleEntries
    | typeof productEntries
    | typeof projectEntries
    | typeof personEntries
    | typeof collectionEntries
    | typeof reviewEntries
    | typeof locationEntries
) =>
  entries?.filter(Boolean).map(({ collection, id, data }) => ({
    href: getHref(collection, id),
    image: "images" in data ? data.images?.[0] : undefined,
    ...data,
  }))

const markdownHtml = marked(content || "")

const slot = await Astro.slots.render("default")
const hasContent = slot && slot.trim().length > 0
---

{
  type === "article" && variant === 1 && (
    <Article1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Article1>
  )
}

{
  type === "articles" && variant === 1 && (
    <Articles1 articles={mapEntries(articleEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Articles1>
  )
}

{
  type === "collection" && variant === 1 && (
    <Collection1
      client:load
      products={mapEntries(productInCollectionEntries)}
      {...rest}
    >
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Collection1>
  )
}

{
  type === "collections" && variant === 1 && (
    <Collections1 collections={mapEntries(collectionEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Collections1>
  )
}

{
  type === "contact" && variant === 1 && (
    <Contact1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Contact1>
  )
}

{
  type === "contact" && variant === 2 && (
    <Contact2 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Contact2>
  )
}

{
  type === "content" && variant === 1 && (
    <Content1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Content1>
  )
}
{
  type === "content" && variant === 2 && (
    <Content2 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Content2>
  )
}
{
  type === "cta" && variant === 1 && (
    <Cta1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Cta1>
  )
}

{
  type === "faqs" && variant === 1 && (
    <Faqs1 client:load {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Faqs1>
  )
}

{
  type === "faqs" && variant === 2 && (
    <Faqs2 client:load {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Faqs2>
  )
}

{
  type === "features" && variant === 1 && (
    <Features1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Features1>
  )
}

{
  type === "footer" && variant === 1 && (
    <Footer1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Footer1>
  )
}

{
  type === "header" && variant === 1 && (
    <Header1 client:load {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Header1>
  )
}

{
  type === "header" && variant === 2 && (
    <Header2 client:load {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Header2>
  )
}
{
  type === "hero" && variant === 1 && (
    <Hero1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Hero1>
  )
}

{
  type === "hero" && variant === 3 && (
    <Hero3 {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Hero3>
  )
}

{
  type === "hero" && variant === 2 && (
    <Hero2 {...rest}>
      <Fragment set:html={markdownHtml} />
      <slot />
    </Hero2>
  )
}

{
  type === "page" && variant === 1 && hasContent && (
    <Page1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Page1>
  )
}

{
  type === "location" && variant === 1 && hasContent && (
    <Page1 {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Page1>
  )
}

{
  type === "pages" && variant === 1 && (
    <Pages1 pages={mapEntries(pageEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Pages1>
  )
}

{
  type === "person" && variant === 1 && (
    <Person1 person={mapEntries(personEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Person1>
  )
}

{
  type === "persons" && variant === 1 && (
    <Persons1 persons={mapEntries(personEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Persons1>
  )
}

{
  type === "product" && variant === 1 && (
    <Product1 client:load {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Product1>
  )
}

{
  type === "products" && variant === 1 && (
    <Products1 products={mapEntries(productEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Products1>
  )
}

{
  type === "project" && variant === 1 && (
    <Projects1 projects={mapEntries(projectEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Projects1>
  )
}

{
  type === "projects" && variant === 1 && (
    <Projects1 projects={mapEntries(projectEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Projects1>
  )
}

{
  type === "reviews" && variant === 1 && (
    <Reviews1 reviews={mapEntries(reviewEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Reviews1>
  )
}

{
  type === "locations" && variant === 1 && (
    <Locations1 locations={mapEntries(locationEntries)} {...rest}>
      <Fragment set:html={markdownHtml} />
      <Fragment set:html={slot} />
    </Locations1>
  )
}
