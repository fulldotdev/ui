---
import { Banner1 } from "@/blocks/banner-1"
import { Collection1 } from "@/blocks/collection-1"
import { Collections1 } from "@/blocks/collections-1"
import { Contact1 } from "@/blocks/contact-1"
import { Contact2 } from "@/blocks/contact-2"
import { Content1 } from "@/blocks/content-1"
import { Cta1 } from "@/blocks/cta-1"
import { Faqs1 } from "@/blocks/faqs-1"
import { Faqs2 } from "@/blocks/faqs-2"
import { Features1 } from "@/blocks/features-1"
import { Footer1 } from "@/blocks/footer-1"
import { Header1 } from "@/blocks/header-1"
import { Header2 } from "@/blocks/header-2"
import { Hero1 } from "@/blocks/hero-1"
import { Hero2 } from "@/blocks/hero-2"
import { Hero3 } from "@/blocks/hero-3"
import { Locations1 } from "@/blocks/locations-1"
import { Media1 } from "@/blocks/media-1"
import { Media2 } from "@/blocks/media-2"
import { Pages1 } from "@/blocks/pages-1"
import { Persons1 } from "@/blocks/persons-1"
import { Post1 } from "@/blocks/post-1"
import { Posts1 } from "@/blocks/posts-1"
import { Pricings1 } from "@/blocks/pricings-1"
import { Product1 } from "@/blocks/product-1"
import { Products1 } from "@/blocks/products-1"
import { Reviews1 } from "@/blocks/reviews-1"
import type { BlockSchema } from "@/schemas/block"
import config from "fulldev.json"

interface Props extends BlockSchema {
  type?: string
  variant?: number
}

const defaultProps = config.blocks[
  Astro.props.type as keyof typeof config.blocks
] as BlockSchema

const { type, variant, ...props } = {
  variant: 1,
  ...defaultProps,
  ...Astro.props,
}

if (type === "header") {
  console.log("hero props", props, variant)
}
---

{type === "banner" && variant === 1 && <Banner1 {...props} />}

{
  type === "collection" && variant === 1 && (
    <Collection1 client:load {...props}>
      <slot />
    </Collection1>
  )
}

{
  type === "collections" && variant === 1 && (
    <Collections1 {...props}>
      <slot />
    </Collections1>
  )
}

{
  type === "contact" && variant === 1 && (
    <Contact1 {...props}>
      <slot />
    </Contact1>
  )
}
{
  type === "contact" && variant === 2 && (
    <Contact2 {...props}>
      <slot />
    </Contact2>
  )
}

{
  type === "content" && variant === 1 && (
    <Content1 {...props}>
      <slot />
    </Content1>
  )
}

{
  type === "cta" && variant === 1 && (
    <Cta1 {...props}>
      <slot />
    </Cta1>
  )
}

{
  type === "faqs" && variant === 1 && (
    <Faqs1 client:load {...props}>
      <slot />
    </Faqs1>
  )
}
{
  type === "faqs" && variant === 2 && (
    <Faqs2 client:load {...props}>
      <slot />
    </Faqs2>
  )
}

{
  type === "features" && variant === 1 && (
    <Features1 {...props}>
      <slot />
    </Features1>
  )
}

{
  type === "footer" && variant === 1 && (
    <Footer1 {...props}>
      <slot />
    </Footer1>
  )
}

{
  type === "header" && variant === 1 && (
    <Header1 client:load {...props}>
      <slot />
    </Header1>
  )
}
{
  type === "header" && variant === 2 && (
    <Header2 client:load {...props}>
      <slot />
    </Header2>
  )
}

{
  type === "hero" && variant === 1 && (
    <Hero1 {...props}>
      <slot />
    </Hero1>
  )
}
{
  type === "hero" && variant === 2 && (
    <Hero2 {...props}>
      <slot />
    </Hero2>
  )
}
{
  type === "hero" && variant === 3 && (
    <Hero3 {...props}>
      <slot />
    </Hero3>
  )
}

{
  type === "location" && variant === 1 && (
    <Post1 {...props}>
      <slot />
    </Post1>
  )
}

{
  type === "locations" && variant === 1 && (
    <Locations1 {...props}>
      <slot />
    </Locations1>
  )
}

{
  type === "media" && variant === 1 && (
    <Media1 {...props}>
      <slot />
    </Media1>
  )
}
{
  type === "media" && variant === 2 && (
    <Media2 {...props}>
      <slot />
    </Media2>
  )
}

{
  type === "pages" && variant === 1 && (
    <Pages1 {...props}>
      <slot />
    </Pages1>
  )
}

{
  type === "person" && variant === 1 && (
    <Post1 {...props}>
      <slot />
    </Post1>
  )
}

{
  type === "persons" && variant === 1 && (
    <Persons1 {...props}>
      <slot />
    </Persons1>
  )
}

{
  type === "post" && variant === 1 && (
    <Post1 {...props}>
      <slot />
    </Post1>
  )
}

{
  type === "posts" && variant === 1 && (
    <Posts1 {...props}>
      <slot />
    </Posts1>
  )
}

{
  type === "pricings" && variant === 1 && (
    <Pricings1 {...props}>
      <slot />
    </Pricings1>
  )
}

{
  type === "product" && variant === 1 && (
    <Product1 client:load {...props}>
      <slot />
    </Product1>
  )
}

{
  type === "products" && variant === 1 && (
    <Products1 {...props}>
      <slot />
    </Products1>
  )
}

{
  type === "reviews" && variant === 1 && (
    <Reviews1 {...props}>
      <slot />
    </Reviews1>
  )
}
