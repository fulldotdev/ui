---
import { Banner1 } from "@/blocks/banner-1"
import { Collection1 } from "@/blocks/collection-1"
import { Collections1 } from "@/blocks/collections-1"
import { Contact1 } from "@/blocks/contact-1"
import { Contact2 } from "@/blocks/contact-2"
import { Content1 } from "@/blocks/content-1"
import { Cta1 } from "@/blocks/cta-1"
import { Faqs1 } from "@/blocks/faqs-1"
import { Faqs2 } from "@/blocks/faqs-2"
import { Features1 } from "@/blocks/features-1"
import { Footer1 } from "@/blocks/footer-1"
import { Header1 } from "@/blocks/header-1"
import { Header2 } from "@/blocks/header-2"
import { Hero1 } from "@/blocks/hero-1"
import { Hero2 } from "@/blocks/hero-2"
import { Hero3 } from "@/blocks/hero-3"
import { Locations1 } from "@/blocks/locations-1"
import { Media1 } from "@/blocks/media-1"
import { Media2 } from "@/blocks/media-2"
import { Pages1 } from "@/blocks/pages-1"
import { Persons1 } from "@/blocks/persons-1"
import { Post1 } from "@/blocks/post-1"
import { Posts1 } from "@/blocks/posts-1"
import { Pricings1 } from "@/blocks/pricings-1"
import { Product1 } from "@/blocks/product-1"
import { Products1 } from "@/blocks/products-1"
import { Reviews1 } from "@/blocks/reviews-1"
import { getCollection, getEntries } from "astro:content"
import type { AnyEntryMap } from "astro:content"
import { marked } from "marked"

import { getHref } from "@/lib/get-href"

interface Props {
  type: string
  variant: number
  entryId?: string
  content?: string
  pages?: any[]
  posts?: any[]
  products?: any[]
  projects?: any[]
  persons?: any[]
  collections?: any[]
  reviews?: any[]
  locations?: any[]
}

let {
  type,
  variant,
  entryId,
  content,
  pages,
  posts,
  products,
  projects,
  persons,
  collections,
  reviews,
  locations,
  ...rest
} = Astro.props

async function getRightEntries(
  collection: string,
  value: undefined | Parameters<typeof getEntries>[0]
) {
  if (value === undefined) {
    const currentPageSlug = Astro.params.slug as keyof AnyEntryMap
    const childrenCollection = await getCollection(currentPageSlug)
    if (childrenCollection && childrenCollection.length > 0)
      return childrenCollection
    const keyCollection = await getCollection(collection as keyof AnyEntryMap)
    const mapped = keyCollection?.map((entry) => ({
      href: getHref(collection, entry.id),
      image: "images" in entry.data ? entry.data.images?.[0] : undefined,
      ...entry.data,
    }))
    return mapped as any[]
  }
}

const pageEntries = await getRightEntries("pages", pages)
const articleEntries = await getRightEntries("posts", posts)
const productEntries = await getRightEntries("products", products)
const projectEntries = await getRightEntries("projects", projects)
const personEntries = await getRightEntries("persons", persons)
const reviewEntries = await getRightEntries("reviews", reviews)
const collectionEntries = await getRightEntries("collections", collections)
const locationEntries = await getRightEntries("locations", locations)

const productInCollectionEntries = productEntries
  ?.filter((product) =>
    product?.data.collections?.find((c) => {
      if (typeof c === "string") return false
      if ("id" in c) return c.id === entryId
      if ("slug" in c) return c.slug === entryId
      return false
    })
  )
  .map((product) => ({
    href: getHref("products", product.id),
    image: "images" in product.data ? product.data.images?.[0] : undefined,
    ...product.data,
  }))

const slot = await Astro.slots.render("default")
const hasSlot = slot.trim().length > 0
const markdownContent = marked(content || "")
---

<!--  content -->{
  (type === "content" ||
    type === "page" ||
    type == "location" ||
    type === "person") &&
    variant === 1 && (
      <Content1 {...rest}>
        <slot>
          <Fragment set:html={markdownContent} />
        </slot>
      </Content1>
    )
}

{
  type === "collection" && variant === 1 && (
    <Collection1 products={productInCollectionEntries} {...rest}>
      <slot>
        <Fragment set:html={markdownContent} />
      </slot>
    </Collection1>
  )
}

{
  type === "product" && variant === 1 && (
    <Products1 {...rest}>
      <slot>
        <Fragment set:html={markdownContent} />
      </slot>
    </Products1>
  )
}

{
  type === "post" && variant === 1 && (
    <Posts1 posts={articleEntries} {...rest}>
      <slot>
        <Fragment set:html={markdownContent} />
      </slot>
    </Posts1>
  )
}

<!-- entries -->
{type === "pages" && variant === 1 && <Pages1 pages={pageEntries} {...rest} />}

{
  type === "posts" && variant === 1 && (
    <Posts1 posts={articleEntries} {...rest} />
  )
}
{
  type === "products" && variant === 1 && (
    <Products1 products={productEntries} {...rest} />
  )
}
{
  type === "persons" && variant === 1 && (
    <Persons1 persons={personEntries} {...rest} />
  )
}
{
  type === "collections" && variant === 1 && (
    <Collections1 collections={collectionEntries} {...rest} />
  )
}
{
  type === "reviews" && variant === 1 && (
    <Reviews1 reviews={reviewEntries} {...rest} />
  )
}
{
  type === "locations" && variant === 1 && (
    <Locations1 locations={locationEntries} {...rest} />
  )
}

<!-- globals -->
{type === "banner" && variant === 1 && <Banner1 {...rest} />}

{type === "header" && variant === 1 && <Header1 client:load {...rest} />}
{type === "header" && variant === 2 && <Header2 client:load {...rest} />}

{type === "footer" && variant === 1 && <Footer1 {...rest} />}

<!-- sections -->
{type === "contact" && variant === 1 && <Contact1 {...rest} />}
{type === "contact" && variant === 2 && <Contact2 {...rest} />}

{type === "cta" && variant === 1 && <Cta1 {...rest} />}

{type === "faqs" && variant === 1 && <Faqs1 client:load {...rest} />}
{type === "faqs" && variant === 2 && <Faqs2 client:load {...rest} />}

{type === "features" && variant === 1 && <Features1 {...rest} />}

{type === "hero" && variant === 1 && <Hero1 {...rest} />}
{type === "hero" && variant === 2 && <Hero2 {...rest} />}
{type === "hero" && variant === 3 && <Hero3 {...rest} />}

{type === "media" && variant === 1 && <Media1 {...rest} />}
{type === "media" && variant === 2 && <Media2 {...rest} />}

{type === "pricings" && variant === 1 && <Pricings1 {...rest} />}
