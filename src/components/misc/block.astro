---
import { Banner1 } from "@/blocks/banner-1"
import { Blog1 } from "@/blocks/blog-1"
import { Collection1 } from "@/blocks/collection-1"
import { Collection2 } from "@/blocks/collection-2"
import { Collections1 } from "@/blocks/collections-1"
import { Contact1 } from "@/blocks/contact-1"
import { Contact2 } from "@/blocks/contact-2"
import { Content1 } from "@/blocks/content-1"
import { Cta1 } from "@/blocks/cta-1"
import { Events1 } from "@/blocks/events-1"
import { Faqs1 } from "@/blocks/faqs-1"
import { Faqs2 } from "@/blocks/faqs-2"
import { Features1 } from "@/blocks/features-1"
import { Features2 } from "@/blocks/features-2"
import { Footer1 } from "@/blocks/footer-1"
import { Header1 } from "@/blocks/header-1"
import { Header2 } from "@/blocks/header-2"
import { Hero1 } from "@/blocks/hero-1"
import { Hero2 } from "@/blocks/hero-2"
import { Hero3 } from "@/blocks/hero-3"
import { Hero4 } from "@/blocks/hero-4"
import { Hero5 } from "@/blocks/hero-5"
import { Hero6 } from "@/blocks/hero-6"
import { Hero7 } from "@/blocks/hero-7"
import { Locations1 } from "@/blocks/locations-1"
import { Media1 } from "@/blocks/media-1"
import { Media2 } from "@/blocks/media-2"
import { Pages1 } from "@/blocks/pages-1"
import { Person1 } from "@/blocks/person-1"
import { Persons1 } from "@/blocks/persons-1"
import { Post1 } from "@/blocks/post-1"
import { Pricings1 } from "@/blocks/pricings-1"
import { Product1 } from "@/blocks/product-1"
import { Reviews1 } from "@/blocks/reviews-1"
import type { Block } from "@/content.config"
import config from "@/data/config.json"
import { getCollection, getEntry } from "astro:content"

import { getHref } from "@/lib/get-href"

interface Props extends Block {
  type: string
}

const { type } = Astro.props

const blockConfig = config?.sections?.[type]

const { variant, ...props } = {
  variant: 1,
  ...blockConfig,
  ...Astro.props,
}

props.items = (
  props.items
    ? await Promise.all(
        props.items.map(async (item: any) => {
          if (item.collection && item.id) {
            const entry = await getEntry(item.collection, item.id)
            if (!entry) {
              console.warn(`${item.collection}/${item.id} not found`)
              return
            }
            return {
              href: getHref(entry),
              ...entry.data,
            }
          }
          return item
        })
      )
    : undefined
)?.filter(Boolean)

props.className = `${props.className || ""} ${type}-${variant}`
---

{type === "banner" && variant === 1 && <Banner1 {...props} />}

{
  type === "blog" && variant === 1 && (
    <Blog1 {...props}>
      <slot />
    </Blog1>
  )
}

{
  type === "collection" && variant === 1 && (
    <Collection1 {...props}>
      <slot />
    </Collection1>
  )
}

{
  type === "collection" && variant === 2 && (
    <Collection2 client:load {...props}>
      <slot />
    </Collection2>
  )
}

{
  type === "collections" && variant === 1 && (
    <Collections1 {...props}>
      <slot />
    </Collections1>
  )
}

{
  type === "contact" && variant === 1 && (
    <Contact1 client:load {...props}>
      <slot />
    </Contact1>
  )
}
{
  type === "contact" && variant === 2 && (
    <Contact2 client:load {...props}>
      <slot />
    </Contact2>
  )
}

{
  type === "content" && variant === 1 && (
    <Content1 {...props}>
      <slot />
    </Content1>
  )
}

{
  type === "cta" && variant === 1 && (
    <Cta1 {...props}>
      <slot />
    </Cta1>
  )
}

{
  type === "faqs" && variant === 1 && (
    <Faqs1 client:load {...props}>
      <slot />
    </Faqs1>
  )
}
{
  type === "faqs" && variant === 2 && (
    <Faqs2 client:load {...props}>
      <slot />
    </Faqs2>
  )
}

{
  type === "features" && variant === 1 && (
    <Features1 {...props}>
      <slot />
    </Features1>
  )
}
{
  type === "features" && variant === 2 && (
    <Features2 {...props}>
      <slot />
    </Features2>
  )
}

{
  type === "footer" && variant === 1 && (
    <Footer1 {...props}>
      <slot />
    </Footer1>
  )
}

{
  type === "header" && variant === 1 && (
    <Header1 client:load {...props}>
      <slot />
    </Header1>
  )
}
{
  type === "header" && variant === 2 && (
    <Header2 client:load {...props}>
      <slot />
    </Header2>
  )
}

{
  type === "hero" && variant === 1 && (
    <Hero1 {...props}>
      <slot />
    </Hero1>
  )
}
{
  type === "hero" && variant === 2 && (
    <Hero2 {...props}>
      <slot />
    </Hero2>
  )
}
{
  type === "hero" && variant === 3 && (
    <Hero3 {...props}>
      <slot />
    </Hero3>
  )
}

{
  type === "hero" && variant === 4 && (
    <Hero4 {...props}>
      <slot />
    </Hero4>
  )
}

{
  type === "hero" && variant === 5 && (
    <Hero5 {...props}>
      <slot />
    </Hero5>
  )
}

{
  type === "hero" && variant === 6 && (
    <Hero6 {...props}>
      <slot />
    </Hero6>
  )
}

{
  type === "hero" && variant === 7 && (
    <Hero7 {...props}>
      <slot />
    </Hero7>
  )
}

{
  type === "event" && variant === 1 && (
    <Post1 {...props}>
      <slot />
    </Post1>
  )
}

{
  type === "events" && variant === 1 && (
    <Events1 {...props}>
      <slot />
    </Events1>
  )
}

{
  type === "location" && variant === 1 && (
    <Post1 {...props}>
      <slot />
    </Post1>
  )
}

{
  type === "locations" && variant === 1 && (
    <Locations1 {...props}>
      <slot />
    </Locations1>
  )
}

{
  type === "media" && variant === 1 && (
    <Media1 {...props}>
      <slot />
    </Media1>
  )
}
{
  type === "media" && variant === 2 && (
    <Media2 {...props}>
      <slot />
    </Media2>
  )
}

{
  type === "pages" && variant === 1 && (
    <Pages1 {...props}>
      <slot />
    </Pages1>
  )
}

{
  type === "person" && variant === 1 && (
    <Person1 {...props}>
      <slot />
    </Person1>
  )
}

{
  type === "persons" && variant === 1 && (
    <Persons1 {...props}>
      <slot />
    </Persons1>
  )
}

{
  type === "post" && variant === 1 && (
    <Post1 {...props}>
      <slot />
    </Post1>
  )
}

{
  type === "pricings" && variant === 1 && (
    <Pricings1 {...props}>
      <slot />
    </Pricings1>
  )
}

{
  type === "product" && variant === 1 && (
    <Product1 client:load {...props}>
      <slot />
    </Product1>
  )
}

{
  type === "reviews" && variant === 1 && (
    <Reviews1 {...props}>
      <slot />
    </Reviews1>
  )
}
