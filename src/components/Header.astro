---
import type { HTMLTag, Polymorphic } from 'astro/types'
import { getCollection } from 'astro:content'
import Button from 'fulldev-ui/components/Button.astro'
import Drawer from 'fulldev-ui/components/Drawer.astro'
import Logo from 'fulldev-ui/components/experimental/Logo.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Link from 'fulldev-ui/components/Link.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Row from 'fulldev-ui/components/Row.astro'
import Search from 'fulldev-ui/components/Search.astro'

type Props<As extends HTMLTag = 'header'> = Polymorphic<{ as: As }> & {
  structure?: 'spread' | 'row' | 'column'
  position?: 'relative' | 'sticky' | 'fixed' | 'absolute'
  variant?: 'ghost' | 'base' | 'subtle' | 'soft' | 'surface' | 'outline'
  size?: 'sm' | 'md' | 'lg'
  frame?: 'fill' | 'panel'
  align?: 'start' | 'center' | 'end'
  space?: 'none' | 'auto'
  logo?: string
  heading?: string
  links?: any[]
  buttons?: any[]
  drawer?: any[]
  search?: any
}

const {
  as = 'header',
  align = 'center',
  structure = 'spread',
  space = 'auto',
  size = 'sm',
  frame = 'fill',
  variant = 'base',
  logo,
  heading,
  links,
  buttons,
  drawer,
  search,
  ...rest
} = Astro.props

const slug = Astro.url.pathname.replace(/^\/|\/$/g, '')
const url = Astro.url.href
---

<Root
  class:list={'header'}
  {as}
  {frame}
  {structure}
  {variant}
  {space}
  {size}
  {...rest}
>
  <Row
    style={{ textDecoration: 'none', height: '100%' }}
    as="a"
    href="/"
  >
    <Logo src={logo} />
    <Heading
      as="p"
      level={3}
      html={heading}
    />
  </Row>
  <Row>
    {
      links?.map((link) => (
        <Link
          class={'header-link'}
          {...link}
        />
      ))
    }
    {
      buttons?.map((button) => (
        <Button
          variant="secondary"
          {...button}
        />
      ))
    }
    <Search {...search} />
    <Drawer
      icon="menu-2"
      id="navigation-drawer"
    >
      {
        drawer &&
          drawer.length > 0 &&
          drawer.map((item: any) => (
            <>
              <Heading
                level={6}
                html={item.heading}
              />
              {item.links?.map((link: any) => (
                <Link
                  {...link}
                  class="sidebar-link"
                  color={
                    url.replace(/\/$/, '').endsWith(link.href)
                      ? 'brand'
                      : undefined
                  }
                />
              ))}
              {item.folder &&
                (async () => {
                  const pages = await getCollection(
                    'pages',
                    (entry: any) =>
                      entry.slug.startsWith(item.folder) &&
                      !entry.slug.endsWith(item.folder)
                  )
                  return pages.map((page: any) => (
                    <Link
                      href={`/${page.slug}`}
                      class="sidebar-link"
                      color={slug === page.slug ? 'brand' : undefined}
                      html={page.data.title}
                    />
                  ))
                })()}
            </>
          ))
      }
    </Drawer>
  </Row>
</Root>

<style lang="scss" is:global>
  :root {
    --header-height: calc(
      var(--text-2) + 2 * var(--space-4) + 2 * var(--space-3)
    );
  }

  @layer fulldev {
    .header {
      --screen: 1536px;
      --gutter: max(4vw, calc(100vw - var(--screen)) / 2);

      display: flex;
      position: relative;
      top: 0;
      right: 0;
      left: 0;
      align-items: center;
      z-index: 10;
      border-bottom: 1px solid var(--color-a6);
      width: 100%;
      // TODO: fix this
      max-width: calc(100% - (2 * var(--outer-x)));
      height: var(--header-height);

      &.frame-fill {
        background-color: var(--color-2);
        padding: 0 var(--gutter);
      }

      &.frame-panel {
        margin: var(--space-3) var(--gutter);
        border: 1px solid var(--color-a6);
        border-radius: var(--radius-2);
        padding: var(--space-4) min(var(--gutter), var(--space-4));
        width: auto;
        overflow: hidden;
      }

      &.position-fixed {
        position: fixed;
      }

      &.position-absolute {
        position: absolute;
      }

      &.position-sticky {
        position: sticky;
        top: -1px;
      }

      .header-link {
        display: none;
        font-size: var(--text-2);

        @media (min-width: 1024px) {
          display: flex;
        }
      }

      .drawer-link {
        font-size: var(--text-2);
      }

      .drawer-button {
        @media (min-width: 1024px) {
          display: none !important;
        }
      }
    }
  }
</style>
