---
import type { HTMLAttributes } from 'astro/types'
import { mapKeys } from 'radash'
import config from 'virtual:fulldev-ui/config'

interface Props extends HTMLAttributes<'div'> {
  // size?: 'sm' | 'md' | 'lg'
  // color?: 'base' | 'brand'
  size?: string | number | null | undefined
  color?: string | undefined | null
  contrast?: boolean | undefined
  theme?: 'light' | 'dark' | undefined
  [key: string | number | symbol]: any
}

const {
  as: As = 'div',
  if: ifProp = 'content',
  space,
  theme,
  variant,
  density,
  size,
  align,
  justify,
  color,
  position,
  panel,
  contrast,
  structure,
  text,
  html,
  level,
  placement,
  reverse,
  open,
  lead,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasContent = (str?: undefined | string) =>
  typeof str === 'string' && str.trim().length > 0
const render =
  ifProp == 'content'
    ? hasContent(slot) || hasContent(html) || hasContent(text)
    : ifProp

const componentName = Astro.props.class?.split(' ').pop() ?? ''
const userComponents = import.meta.glob('/src/**/*.astro')
const mappedUserComponents = mapKeys(userComponents, (key: string) => {
  const name = key.split('/').pop()?.split('.').shift()?.toLowerCase()
  return name || key
})

const found =
  config.overrideComponents && (mappedUserComponents[componentName] as any)
const FoundComponent = found ? (await found()).default : null
---

{
  render && (
    <>
      {found ? (
        <FoundComponent {...Astro.props}>
          <Fragment set:html={slot} />
        </FoundComponent>
      ) : (
        <As
          class:list={[
            'root',
            {
              contrast,
              panel,
              open,
              reverse,
              lead,
              [`size-${size}`]: size,
              [`color-${color}`]: color,
              [`theme-${theme}`]: theme,
              [`level-${level}`]: level,
              [`variant-${variant}`]: variant,
              [`structure-${structure}`]: structure,
              [`align-${align}`]: align,
              [`justify-${justify}`]: justify,
              [`position-${position}`]: position,
              [`placement-${placement}`]: placement,
            },
          ]}
          {...rest}
        >
          <Fragment set:html={slot} />
        </As>
      )}
    </>
  )
}

<style is:global lang="scss">
  @import '@unocss/reset/tailwind.css' layer(fulldev);
  @import 'fulldev-ui/css/color.css';
  @import 'fulldev-ui/css/size.css';
  @import 'fulldev-ui/css/space.css';
</style>
