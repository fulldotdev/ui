---
const {
  as: As = 'div',
  theme,
  variant,
  size,
  align,
  color,
  position,
  panel,
  contrast,
  structure,
  level,
  placement,
  reverse,
  open,
  lead,
  current,
  direction,
  center,
  frame,
  dark,
  inset,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const render = 'if' in rest ? rest.if : slot?.trim().length > 0
---

{
  render && (
    <As
      class:list={[
        {
          contrast,
          panel,
          open,
          reverse,
          current,
          center,
          inset,
          dark,
          [`size-${size}`]: size,
          [`color-${color}`]: color,
          [`level-${level}`]: level,
          [`frame-${frame}`]: frame,
          [`variant-${variant}`]: variant,
          [`structure-${structure}`]: structure,
          [`align-${align}`]: align,
          [`position-${position}`]: position,
          [`direction-${direction}`]: direction,
        },
      ]}
      {...rest}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global>
  @import 'tailwindcss/base' layer(fulldev);
  @import 'fulldev-ui/css/theme' layer(fulldev);
  @import 'tailwindcss/components';
  @tailwind utilities;

  @layer utilities {
    .container {
      max-width: var(--container, 100vw);
    }
  }
</style>
