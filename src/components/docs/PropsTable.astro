---
const { schema } = Astro.props

import Table from 'fulldev-ui/components/Table.astro'
import { zodToJsonSchema } from 'zod-to-json-schema'

const slug = Astro.params.page?.split('/').pop() || ''

const allSchemas = import.meta.glob('/src/schemas/**/*.ts', {
  eager: true,
})

const schemaName = schema ?? slug
const foundSchema = Object.entries(allSchemas).find(([key]) =>
  key.toLowerCase().includes(`/${schemaName.toLowerCase()}.ts`)
)?.[1] as any

const jsonSchema = zodToJsonSchema(foundSchema?.default, {
  pipeStrategy: 'output',
}) as { properties?: Record<string, any> }

const properties = jsonSchema.properties || {}

const tableBody = Object.entries(properties).map(([key, value]: any) => {
  let type = 'any'
  if (value.enum) {
    type = value.enum.join(' | ')
  } else if (value.type) {
    type = value.type
  } else if (value.$ref) {
    type = `typeof ${key}`
  }
  const defaultValue = value.default?.toString() ?? '-'
  return [key, type, defaultValue]
})
---

<Table
  size="md"
  class:list={['props-table']}
  header={['Prop', 'Type', 'Default']}
  body={tableBody}
/>

<style is:global lang="scss">
  .props-table {
    overflow: auto;
  }
</style>
