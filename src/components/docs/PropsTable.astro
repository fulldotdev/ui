---
import Table from 'fulldev-ui/components/Table.astro'
import { readFileSync } from 'node:fs'
import { pascal } from 'radash'

const slug = Astro.url.pathname.replace(/\/$/, '').split('/').pop() || ''
const componentName = pascal(slug)
const allComponents = import.meta.glob('src/**/*.astro', { eager: true })
const foundComponent = Object.entries(allComponents).find(
  ([key]) => key.split('/').pop() === `${componentName}.astro`
)?.[1] as any
const foundContent =
  foundComponent && readFileSync(foundComponent.file, 'utf-8')
console.log(foundContent)

const extractProps = (content: string) => {
  const propsMatch =
    content.match(
      /(?:interface Props|type Props(?:<[^>]+>)?)\s*(?:extends[^{]+)?\s*{([\s\S]*?)}/
    ) ||
    content.match(
      /type Props(?:<[^>]+>)?\s*=\s*(?:HTMLAttributes<'[^']+'>\s*&\s*)?(?:Polymorphic<[^>]+>\s*&\s*)?([\s\S]*?)(?:}|$)/
    ) ||
    content.match(
      /interface Props(?:<[^>]+>)?\s*(?:extends[^{]+)?\s*{([\s\S]*?)}/
    )
  if (propsMatch) {
    const propsContent = propsMatch[1]
    const props = [
      ...propsContent.matchAll(/(\w+)(?:\??:\s*((?:[^;\n]|\n\s*\|)*)|,)/g),
    ].map(([, name, type]) => ({
      name,
      type: type
        ? type
            .replace(/^\s*\|\s*/, '')
            .trim()
            .replace(/\n\s*\|/g, ' | ')
        : 'unknown',
    }))
    return props.filter((prop) => prop.name !== 'as')
  }
  return []
}

const extractDefaultProps = (content: string) => {
  const defaultPropsMatch = content.match(
    /const\s*{[\s\S]*?}\s*=\s*Astro\.props/
  )
  return defaultPropsMatch
    ? [
        ...defaultPropsMatch[0].matchAll(
          /(\w+)\s*=\s*('[^']*'|"[^"]*"|[^,\n]+)/g
        ),
      ].reduce(
        (acc, [, name, value]) => {
          if (name !== 'as') {
            acc[name] =
              value.startsWith("'") || value.startsWith('"')
                ? value.slice(1, -1)
                : value
          }
          return acc
        },
        {} as Record<string, string>
      )
    : {}
}

const extractAsDefault = (content: string) => {
  const asDefaultMatch = content.match(/as\s*=\s*([^,\n]+)/)
  return asDefaultMatch
    ? asDefaultMatch[1]
        .trim()
        .split(' : ')[0]
        .replace(/['"]/g, '')
        .replace(/href \? a : /, '')
        .replace(/href \? 'a' : /, '')
    : 'div'
}

const extractComponentProps = (content: string) => {
  const componentPropsMatches =
    content.match(
      /(?:extends ComponentProps<typeof ([^>]+)>|ComponentProps<typeof ([^>]+)>)/g
    ) || []
  return componentPropsMatches.map((match) => {
    const componentName = match.match(/typeof ([^>]+)/)[1]
    return {
      name: componentName,
      props: `ComponentProps<typeof ${componentName}>`,
    }
  })
}

const parsedProps = extractProps(componentFileContent)
const parsedAstroProps = extractDefaultProps(componentFileContent)
const asDefault = extractAsDefault(componentFileContent)
const componentProps = extractComponentProps(componentFileContent)

const allProps = [
  ...parsedProps,
  ...componentProps.map((cp) => ({ name: cp.name, type: cp.props })),
]

const getDefaultValue = (name: string, type: string) => {
  if (parsedAstroProps[name]) {
    return parsedAstroProps[name]
  }
  if (type.includes('undefined')) {
    return 'undefined'
  }
  return '-'
}
---

<Table
  size="md"
  class:list={['props-table']}
  header={['Prop', 'Type', 'Default']}
  body={[
    ...allProps.map((item) => [
      item.name,
      item.type,
      getDefaultValue(item.name, item.type),
    ]),
    ['as', 'HTMLTag', asDefault],
    ['HTML Attributes', `Polymorphic<${asDefault}>`, '-'],
  ]}
/>

<style is:global lang="scss">
  .props-table {
    overflow: auto;
  }
</style>
