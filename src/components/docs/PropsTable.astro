---
// This component is experimental
// @ts-nocheck
import Table from 'fulldev-ui/components/Table.astro'
import { readFileSync } from 'node:fs'

const pathnameWithoutTrailingSlash = Astro.url.pathname.replace(/\/$/, '')
const slug = pathnameWithoutTrailingSlash.split('/').pop() || ''
const component = slug.charAt(0).toUpperCase() + slug.slice(1)

const allComponents = await Astro.glob('../../components/**/*.astro')
const found = allComponents.find(
  (c) => c.file.split('/').pop()?.replace('.astro', '') === component
)

if (!found) return

const componentFileContent = readFileSync(found.file, 'utf-8')

// Function to extract props from the component file
const extractProps = (content: string) => {
  // Regex to match different prop definitions:
  // 1. interface Props {...}
  // 2. type Props = {...}
  // 3. type Props = HTMLAttributes<'...'> & {...}
  // 4. type Props = Polymorphic<...> & {...}
  const propsMatch =
    content.match(
      /(?:interface Props|type Props(?:<[^>]+>)?)\s*(?:extends[^{]+)?\s*{([\s\S]*?)}/
    ) ||
    content.match(
      /type Props(?:<[^>]+>)?\s*=\s*(?:HTMLAttributes<'[^']+'>\s*&\s*)?(?:Polymorphic<[^>]+>\s*&\s*)?([\s\S]*?)(?:}|$)/
    ) ||
    content.match(
      /interface Props(?:<[^>]+>)?\s*(?:extends[^{]+)?\s*{([\s\S]*?)}/
    )
  if (propsMatch) {
    const propsContent = propsMatch[1]
    // Regex to match individual prop definitions
    const props = [
      ...propsContent.matchAll(/(\w+)(?:\??:\s*((?:[^;\n]|\n\s*\|)*)|,)/g),
    ].map(([, name, type]) => ({
      name,
      type: type
        ? type
            .replace(/^\s*\|\s*/, '')
            .trim()
            .replace(/\n\s*\|/g, ' | ')
        : 'unknown',
    }))
    return props.filter((prop) => prop.name !== 'as')
  }
  return []
}

// Function to extract default prop values
const extractDefaultProps = (content: string) => {
  // Regex to match the Astro.props destructuring
  const defaultPropsMatch = content.match(
    /const\s*{[\s\S]*?}\s*=\s*Astro\.props/
  )
  return defaultPropsMatch
    ? [
        ...defaultPropsMatch[0].matchAll(
          /(\w+)\s*=\s*('[^']*'|"[^"]*"|[^,\n]+)/g
        ),
      ].reduce(
        (acc, [, name, value]) => {
          if (name !== 'as') {
            acc[name] =
              value.startsWith("'") || value.startsWith('"')
                ? value.slice(1, -1)
                : value
          }
          return acc
        },
        {} as Record<string, string>
      )
    : {}
}

// Function to extract the default 'as' prop value
const extractAsDefault = (content: string) => {
  // Regex to match the 'as' prop assignment
  const asDefaultMatch = content.match(/as\s*=\s*([^,\n]+)/)
  if (asDefaultMatch) {
    let asDefault = asDefaultMatch[1]
      .trim()
      .split(' : ')[0]
      .replace(/['"]/g, '')
      .replace(/href \? a : /, '')
      .replace(/href \? 'a' : /, '')

    if (asDefault.includes('?')) {
      asDefault = `{${asDefault}}`
    }

    return asDefault.replace(/{{/g, '{').replace(/}}/g, '}')
  }
  return 'div'
}

// Function to extract component props (e.g., ComponentProps<typeof Button>)
const extractComponentProps = (content: string) => {
  // Regex to match ComponentProps usage
  const componentPropsMatches =
    content.match(
      /(?:extends ComponentProps<typeof ([^>]+)>|ComponentProps<typeof ([^>]+)>)/g
    ) || []
  return componentPropsMatches.map((match) => {
    const componentName = match.match(/typeof ([^>]+)/)[1]
    return {
      name: componentName,
      props: `ComponentProps<typeof ${componentName}>`,
    }
  })
}

const parsedProps = extractProps(componentFileContent)
const parsedAstroProps = extractDefaultProps(componentFileContent)
const asDefault = extractAsDefault(componentFileContent)
const componentProps = extractComponentProps(componentFileContent)

const allProps = [
  ...parsedProps,
  ...componentProps.map((cp) => ({ name: cp.name, type: cp.props })),
]

// Function to get the default value for a prop
const getDefaultValue = (name: string, type: string) => {
  if (parsedAstroProps[name]) {
    return parsedAstroProps[name]
  }
  if (type.includes('undefined')) {
    return 'undefined'
  }
  return '-'
}
---

<Table
  size="md"
  class:list={['props-table']}
  header={['Prop', 'Type', 'Default']}
  body={[
    ...allProps.map((item) => [
      item.name,
      item.type,
      getDefaultValue(item.name, item.type),
    ]),
    ['as', 'HTMLTag', asDefault],
    ['HTML Attributes', `Polymorphic<${asDefault}>`, '-'],
  ]}
/>

<style is:global lang="scss">
  .props-table {
    overflow: auto;
  }
</style>
