---
// This component is experimental and only used w
// @ts-nocheck
import Table from 'fulldev-ui/components/Table.astro'
import { readFileSync } from 'node:fs'

const pathnameWithoutTrailingSlash = Astro.url.pathname.replace(/\/$/, '')
const slug = pathnameWithoutTrailingSlash.split('/').pop() || ''
const component = slug.charAt(0).toUpperCase() + slug.slice(1)

const allComponents = await Astro.glob('../../components/**/*.astro')
const found = allComponents.find(
  (c) => c.file.split('/').pop()?.replace('.astro', '') === component
)

if (!found) return

const componentFileContent = readFileSync(found.file, 'utf-8')

const extractProps = (content: string) => {
  const propsMatch = content.match(
    /type Props(?:<[^>]+>)?\s*=\s*(?:HTMLAttributes<'[^']+'>\s*&\s*)?(?:Polymorphic<[^>]+>\s*&\s*)?([\s\S]*?)(?:}|$)/
  )
  if (propsMatch) {
    const propsContent = propsMatch[1]
    const props = [
      ...propsContent.matchAll(/(\w+)(?:\??:\s*((?:[^;\n]|\n\s*\|)*)|,)/g),
    ].map(([, name, type]) => ({
      name,
      type: type
        ? type
            .replace(/^\s*\|\s*/, '')
            .trim()
            .replace(/\n\s*\|/g, ' | ')
        : 'unknown',
    }))
    return props
  }
  return []
}

const extractDefaultProps = (content: string) => {
  const defaultPropsMatch = content.match(
    /const\s*{[\s\S]*?}\s*=\s*Astro\.props/
  )
  return defaultPropsMatch
    ? [
        ...defaultPropsMatch[0].matchAll(
          /(\w+)\s*=\s*('[^']*'|"[^"]*"|[^,\n]+)/g
        ),
      ].reduce(
        (acc, [, name, value]) => {
          acc[name] =
            value.startsWith("'") || value.startsWith('"')
              ? value.slice(1, -1)
              : value
          return acc
        },
        {} as Record<string, string>
      )
    : {}
}

const extractAsDefault = (content: string) => {
  const asDefaultMatch = content.match(/as\s*=\s*([^,\n]+)/)
  return asDefaultMatch
    ? asDefaultMatch[1]
        .trim()
        .split(' : ')[0]
        .replace(/['"]/g, '')
        .replace(/href \? a : /, '')
        .replace(/href \? 'a' : /, '')
    : 'div'
}

const parsedProps = extractProps(componentFileContent)
const parsedAstroProps = extractDefaultProps(componentFileContent)
const asDefault = extractAsDefault(componentFileContent)
---

<Table
  size="md"
  class:list={['props-table']}
  header={['Prop', 'Type', 'Default']}
  body={[
    ...parsedProps.map((item) => [
      item.name,
      item.type,
      parsedAstroProps[item.name] ?? '-',
    ]),
    ...(asDefault !== 'div'
      ? [
          ['as', 'HTMLTag', asDefault],
          ['HTML Attributes', `Polymorphic<${asDefault}>`, '-'],
        ]
      : []),
  ]}
/>

<style is:global lang="scss">
  .props-table {
    overflow: auto;
  }
</style>
