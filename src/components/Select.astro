---
import type { HTMLAttributes } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import Label from 'fulldev-ui/components/Label.astro'

interface Props extends HTMLAttributes<'select'> {
  size?: 'sm' | 'md' | 'lg' | undefined
  label?: string | undefined
  placeholder?: string | undefined
  options?: string[] | undefined
  value?: string | undefined
}

const {
  label,
  placeholder,
  name = label || placeholder,
  id = name,
  size = 'md',
  options,
  value,
  disabled,
  required,
  form,
  ...rest
} = Astro.props
---

<Element
  class:list={`select size-${size}`}
  for={id}
>
  <Label
    text={label}
    for={id}
  />
  <Element
    class:list="select-select"
    as="select"
    {id}
    {name}
    {disabled}
    {required}
    {form}
    {...rest}
  >
    <Element
      class:list="select-option"
      as="option"
      value={placeholder}
      set:html={placeholder}
      disabled
      selected
    />
    {
      options?.map((option: any) => (
        <Element
          class:list="select-option"
          as="option"
          selected={value === option}
          set:html={option}
          value={option}
        />
      ))
    }
    <slot />
  </Element>
  {options && <Icon name="chevron-down" />}
</Element>

<style is:global>
  @layer fulldev {
    .select {
      display: flex;
      position: relative;
      flex-direction: column;

      .label {
        padding-bottom: var(--spacing-1-5);
      }

      .icon {
        position: absolute;
        pointer-events: none;
      }

      select {
        display: flex;
        appearance: none;
        border: 1px solid var(--color-input);
        border-radius: var(--radius-md);
        background-color: var(--color-background);
        padding-right: var(--spacing-10);
        width: 100%;
        color: var(--color-foreground);
        font-size: var(--text-sm);

        &:focus-visible {
          outline: none;
          box-shadow: 0 0 0 2px var(--color-ring);
        }

        &:disabled {
          opacity: 0.5;
          pointer-events: none;
        }

        &[readonly] {
          pointer-events: none;
        }
      }

      &.size-sm {
        .icon {
          right: var(--spacing-1-5);
          bottom: var(--spacing-1-5);
        }

        select {
          padding-top: var(--spacing-1-5);
          padding-right: var(--spacing-8);
          padding-bottom: var(--spacing-1-5);
          padding-left: var(--spacing-2-5);
          height: var(--spacing-8);
        }
      }

      &.size-md {
        .icon {
          right: var(--spacing-2-5);
          bottom: var(--spacing-2-5);
        }

        select {
          padding-top: var(--spacing-2);
          padding-right: var(--spacing-10);
          padding-bottom: var(--spacing-2);
          padding-left: var(--spacing-3);
          height: var(--spacing-10);
        }
      }

      &.size-lg {
        .icon {
          right: var(--spacing-3);
          bottom: var(--spacing-3);
        }

        select {
          padding-top: var(--spacing-2-5);
          padding-right: var(--spacing-11);
          padding-bottom: var(--spacing-2-5);
          padding-left: var(--spacing-3-5);
          height: var(--spacing-11);
        }
      }
    }
  }
</style>
