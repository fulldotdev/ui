---
import type { HTMLAttributes } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'
import Label from 'fulldev-ui/components/Label.astro'
import type { GlobalProps } from 'fulldev-ui/types/global-props'

interface Props extends GlobalProps, HTMLAttributes<'div'> {
  true?: string | undefined
  false?: string | undefined
  trueLabel?: string | undefined
  falseLabel?: string | undefined
  name: string
  checked: boolean
}

const { name, checked, trueLabel, falseLabel, ...rest } = Astro.props
---

<Element
  class:list="switch"
  {...rest}
>
  <Label
    for={name}
    set:html={falseLabel}
  />
  <label
    for={name}
    class="switch-element"
  >
    <input
      {checked}
      name={name}
      type="checkbox"
      class="checkbox"
    />
    <div class="checkmark"></div>
  </label>
  <Label
    for={name}
    set:html={trueLabel}
  />
</Element>

<style is:global >
  @layer fulldev {
    .switch {
      display: flex;
      position: relative;
      align-items: center;
      gap: var(--space-1);
      width: 100%;

      .switch-element {
        display: block;
        position: relative;
        transition: all;
        cursor: pointer;
        box-sizing: border-box;
        border: 1px solid var(--border);
        border-radius: 999px;
        background-color: var(--base-2);
        padding: var(--space-1);
        width: fit-content;
        min-width: calc(
          (var(--text-2) + 2 * var(--space-2) * 2) + 2 * var(--space-1)
        );
        height: calc(var(--text-2) + 2 * var(--space-2));

        .checkbox {
          position: absolute;
          opacity: 0;
          width: 0;
          height: 0;
        }

        .checkmark {
          transform: 0%;
          transition: all;
          border-radius: 999px;
          background-color: var(--base-1);
          width: 50%;
          height: 100%;
        }

        .checkbox:checked ~ .checkmark {
          transform: translateX(100%);
          background-color: var(--color-12);
        }

        &:hover {
          background-color: var(--base-3);
        }

        &:focus-visible {
          outline: 2px solid var(--focus) !important;
          outline-offset: 2px;
        }

        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
          pointer-events: none;
        }
      }
    }
  }
</style>
