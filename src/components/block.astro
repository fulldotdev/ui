---
import { getCollection } from "astro:content"
import type { CollectionKey } from "astro:content"
import config from "fulldev.config.json"
import { keys, omit } from "remeda"

import { getHref } from "@/lib/get-href"
import { getItem } from "@/lib/get-item"
import type { BlockSchema } from "@/lib/types"
import { Block as ReactBlock } from "@/components/block"

type Props = BlockSchema

const { form, children, ...props } = Astro.props
const collectionKeys = keys(config)

// fetch all paths and put into the items array
const items = (
  await Promise.all(
    collectionKeys.map(async (collectionKey) => {
      const paths = props[collectionKey]
      if (!paths) return undefined
      return Promise.all(paths.map(getItem))
    })
  )
)
  .flat()
  .filter((item) => item !== undefined)

// get all items in a collection
const collection = (await getCollection(props.collection as CollectionKey)).map(
  (entry) => ({
    href: getHref(entry),
    ...entry.data,
  })
)

const formItem = form && getItem(form)
---

<ReactBlock
  client:load
  items={[...items, ...collection]}
  form={formItem}
  {...omit(props, collectionKeys)}
>
  <slot />
  <Fragment set:html={children} />
</ReactBlock>
