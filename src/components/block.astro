---
import { getCollection } from "astro:content"

import { getEntryByPath, getItemByEntry } from "@/lib/collections"
import type { BlockSchema } from "@/lib/schemas"
import { Block as ReactBlock } from "@/components/block"

type Props = BlockSchema

const { children, glob, references, items, ...props } = Astro.props

// Get all entries from the paths
const referenceEntries = references
  ? await Promise.all(
      references.map(async (path) => {
        return await getEntryByPath(path)
      })
    )
  : []

// Get all entries from the collection
const globEntries = glob
  ? await getCollection("content", (entry) => entry.id.startsWith(glob))
  : []

// Merge the path entries with the collection entries
const allEntries = [...(referenceEntries ?? []), ...(globEntries ?? [])]

// Transform the entries into items
const entryItems = allEntries
  .map((entry) => {
    if (!entry) return undefined
    return getItemByEntry(entry)
  })
  .filter((item) => item !== undefined)
---

<ReactBlock
  client:load
  bookshop:live
  {...props}
  items={[...entryItems, ...(items ?? [])]}
>
  <slot />
  <Fragment set:html={children} />
</ReactBlock>
