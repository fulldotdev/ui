---
import { getCollection } from "astro:content"
import collections from "collections.json"
import { keys } from "remeda"

import { getEntryByPath, getItemByEntry } from "@/lib/collections"
import type { BlockSchema } from "@/lib/schemas"
import { Block as ReactBlock } from "@/components/block"

type Props = BlockSchema

const { children, collection, items, ...props } = Astro.props

// Get all paths from the props
const paths = keys(collections)
  .map((collection) => props[collection])
  .flat()
  .filter((path) => path !== undefined)

// Get all entries from the paths
const pathEntries = await Promise.all(
  paths.map(async (path) => {
    return await getEntryByPath(path)
  })
)

// Get all entries from the collection
const collectionEntries = collection
  ? await getCollection(collection as keyof typeof collections)
  : []

// Merge the path entries with the collection entries
const entries = [...(collectionEntries ?? []), ...(pathEntries ?? [])]

// Transform the entries into items
const entryItems = entries
  .map((entry) => {
    if (!entry) return undefined
    return getItemByEntry(entry)
  })
  .filter((item) => item !== undefined)
---

<ReactBlock client:load {...props} items={[...entryItems, ...(items ?? [])]}>
  <slot />
  <Fragment set:html={children} />
</ReactBlock>
