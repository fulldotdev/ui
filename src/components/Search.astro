---
import { getCollection } from 'astro:content'
import { getHref } from 'fulldev-ui/utils/getHref'
import Button from './Button.astro'
import Element from './Element.astro'
import Heading from './Heading.astro'
import Input from './Input.astro'
import Paragraph from './Paragraph.astro'

const pages = await getCollection('pages')
---

<script>
  document.addEventListener('astro:page-load', () => {
    const input = document.querySelector('.search-input')
    const items = document.querySelectorAll('.search-item')

    input?.addEventListener('input', (e) => {
      if (!(e.target instanceof HTMLInputElement)) return
      const value = e.target.value.toLowerCase()
      items.forEach((item) => {
        if (!(item instanceof HTMLElement)) return

        const title =
          item.querySelector('.heading')?.textContent?.toLowerCase() || ''
        const description =
          item.querySelector('.paragraph')?.textContent?.toLowerCase() || ''

        const isVisible = title.includes(value) || description.includes(value)
        item.classList.toggle('hide', !isVisible)
      })
    })
  })
</script>

<Button
  class:list="search-button"
  variant={Astro.props.variant}
  size="sm"
  icon="search"
  onclick={`document.getElementById('search').showModal()`}
/>

<dialog
  class="search"
  id="search"
  onclick={`event.target === this && this.close()`}
>
  <Element class:list="search-container">
    <Element class:list="search-content">
      <Input
        class:list="search-input"
        placeholder="Search"
        icon="search"
      />
      <Element class:list="search-list">
        {
          pages.map(({ id, data }) => (
            <Element
              as="a"
              href={getHref(id)}
              class="search-item hide"
            >
              <Heading
                text={data.title}
                as="h6"
                size="md"
              />
              <Paragraph
                set:text={'description' in data ? data.description : undefined}
              />
            </Element>
          ))
        }
      </Element>
    </Element>
  </Element>
</dialog>

<style is:global>
  @layer fulldev {
    .search {
      outline: none;
      border: none !important;
      border-radius: var(--radius-lg);
      background-color: transparent;
      padding-top: var(--spacing-24);
      padding-bottom: var(--spacing-24);
      width: 100%;
      max-width: var(--breakpoint-md);
      height: 100%;
      max-height: 100%;

      &::backdrop {
        background-color: rgb(0 0 0 / 0.5);
      }

      &:is(.dark &) {
        color-scheme: dark;
      }

      .search-container {
        box-shadow: var(--shadow-md);
        border-radius: var(--radius-lg);
        background-color: var(--color-background);
        width: 100%;
        overflow: hidden;
      }

      .search-content {
        width: 100%;
        max-height: 400px;
        overflow-y: auto;
      }

      .input {
        margin: var(--spacing-5);
      }

      .search-list {
        display: flex;
        flex-grow: 0;
        flex-shrink: 1;
        flex-direction: column;
        width: 100%;
        height: 100%;
      }

      .search-item {
        transition: var(--transition);
        border-top: 1px solid var(--color-border);
        padding: var(--spacing-5);

        &:hover {
          background-color: var(--color-accent);
        }

        &.hide {
          display: none;
        }
      }

      .paragraph {
        margin-top: var(--spacing-2);
        overflow: hidden;
        color: var(--color-muted-foreground);
        font-size: var(--text-sm);
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }
  }
</style>
