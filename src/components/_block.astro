---
import { getCollection, getEntries } from "astro:content"

import { type BlockSchema } from "@/schemas/block"
import { Block as ReactBlock } from "@/components/block"

type Props = BlockSchema

const props = Astro.props

const articlesData =
  props.type === "articles" &&
  (props.blog
    ? await getCollection(
        "articles",
        (article) => article.data.blog?.id === props.blog?.id
      )
    : props.articles
      ? await getEntries(props.articles)
      : await getCollection("articles")
  ).map((article) => ({
    href: `/articles/${article.id}/`,
    ...article.data,
  }))

const productsData =
  props.type === "products" &&
  (props.collection
    ? await getCollection("products", (product) =>
        product.data.collections?.some(
          (collection) => collection.id === props.collection?.id
        )
      )
    : props.products
      ? await getEntries(props.products)
      : await getCollection("products")
  ).map((product) => ({
    href: `/products/${product.id}/`,
    ...product.data,
  }))

const collectionsData =
  props.type === "collections" &&
  (props.collections
    ? await getEntries(props.collections)
    : await getCollection("collections")
  ).map((collection) => ({
    href: `/collections/${collection.id}/`,
    ...collection.data,
  }))

const personsData =
  props.type === "persons" &&
  (props.persons
    ? await getEntries(props.persons)
    : await getCollection("persons")
  ).map((person) => ({
    href: `/persons/${person.id}/`,
    ...person.data,
  }))

const reviewsData =
  props.type === "reviews" &&
  (props.reviews
    ? await getEntries(props.reviews)
    : await getCollection("reviews")
  ).map((review) => review.data)
---

<ReactBlock
  articles={articlesData}
  products={productsData}
  collections={collectionsData}
  persons={personsData}
  reviews={reviewsData}
  {...props}
/>
