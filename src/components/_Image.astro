---
// @ts-nocheck
import type { ImageMetadata } from 'astro'
import type { HTMLAttributes } from 'astro/types'
import { Image as AstroImage } from 'astro:assets'
import { getEntry } from 'astro:content'

interface Props extends GlobalProps, HTMLAttributes<'img'> {
  id?: any
  size?: 'sm' | 'md' | 'lg' | undefined
  position?: 'background' | 'cover' | 'inset' | undefined
}

const { id } = Astro.props
const entry = id ? (await getEntry('images', id))?.data : {}

const {
  width = 1920,
  height = 1920,
  position,
  src,
  alt,
  size,
  ...rest
} = {
  ...entry,
  ...Astro.props,
}

function getAltBySrc() {
  if (!src) return
  const filename = src?.split('/').pop()
  const slug = filename && filename.split('.')[0]
  const unslugged = slug?.replace(/-/g, ' ')
  return unslugged || ''
}

const images = import.meta.glob<{ default: ImageMetadata }>('/src/images/*')
const image = images[src as keyof typeof images]
---

{
  (image || src) && (
    <AstroImage
      class:list={[
        'image',
        {
          [`size-${size}`]: size,
          [`position-${position}`]: position,
        },
      ]}
      alt={alt || getAltBySrc()}
      src={image ? image() : src}
      width={width ? Number(width) : undefined}
      height={height ? Number(height) : undefined}
      {...rest}
    />
  )
}

<style is:global>
  @layer fulldev {
    .image {
      @apply block;

      &.position-contain {
        @apply h-auto w-full object-contain;
      }

      &.position-cover {
        @apply h-full w-full object-cover;
      }

      &.position-background {
        @apply absolute inset-0 h-full max-h-none w-full max-w-none object-cover opacity-30;
      }
    }
  }
</style>
