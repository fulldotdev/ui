---
import type { HTMLAttributes } from 'astro/types'
import Element from 'fulldev-ui/components/Element.astro'

interface Props extends HTMLAttributes<'a'>, HTMLAttributes<'div'> {
  variant?: 'primary' | 'secondary' | 'outline' | undefined
  size?: 'sm' | 'md' | 'lg' | undefined
  text?: string | undefined
  icon?: string | undefined
  href?: string | undefined
}

const {
  variant = 'outline',
  size = 'md',
  text,
  icon,
  href,
  target = href?.startsWith('http') ? '_blank' : undefined,
  ...rest
} = Astro.props
---

<Element
  class:list={`badge variant-${variant} size-${size}`}
  as={href ? 'a' : 'div'}
  {href}
  {target}
  {...rest}
>
  <Fragment set:html={text} />
  <slot />
</Element>

<style>
  @layer fulldev {
    .badge {
      display: inline-flex;
      justify-content: center;
      align-items: center;
      border-radius: var(--radius-full);
      padding-right: var(--spacing-2-5);
      padding-left: var(--spacing-2-5);
      height: var(--spacing-6);
      font-weight: var(--font-medium);
      font-size: var(--text-xs);
      line-height: var(--leading-none);
      white-space: nowrap;

      &:focus-visible {
        outline: none;
        /* TODO: Add ring */
        /* @apply ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2; */
      }

      &:disabled {
        opacity: 0.5;
        pointer-events: none;
      }

      &.size-sm {
        padding-right: var(--spacing-2);
        padding-left: var(--spacing-2);
        min-width: var(--spacing-6);
        height: var(--spacing-6);
      }

      &.size-md {
        padding-right: var(--spacing-3);
        padding-left: var(--spacing-3);
        min-width: var(--spacing-7);
        height: var(--spacing-7);
      }

      &.size-lg {
        padding-right: var(--spacing-3-5);
        padding-left: var(--spacing-3-5);
        min-width: var(--spacing-8);
        height: var(--spacing-8);
      }

      &.variant-primary {
        background-color: var(--color-primary);
        color: var(--color-primary-foreground);

        &:is(a):hover {
          background-color: var(--color-primary-hover);
        }
      }

      &.variant-secondary {
        background-color: var(--color-secondary);
        color: var(--color-secondary-foreground);

        &:is(a):hover {
          background-color: var(--color-secondary-hover);
        }
      }

      &.variant-outline {
        border: 1px solid var(--color-input);
        color: var(--color-accent-foreground);

        &:is(a):hover {
          background-color: var(--color-accent-hover);
        }
      }
    }
  }
</style>
