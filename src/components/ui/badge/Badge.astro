---
import type { HTMLAttributes } from "astro/types"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

type Props = VariantProps<typeof badgeVariants> &
  HTMLAttributes<"span"> &
  HTMLAttributes<"a"> & {
    text?: string
    html?: string
  }

const { class: className, variant, href, text, html, ...props } = Astro.props

const Comp = href ? "a" : "span"
const slot = await Astro.slots.render("default")
const hasSlot = slot?.trim().length > 0
---

{
  hasSlot && (
    <Comp
      data-slot="badge"
      class={cn(badgeVariants({ variant }), className)}
      href={href}
      set:html={html}
      set:text={text}
      {...props}
    >
      <Fragment set:html={slot} />
    </Comp>
  )
}
