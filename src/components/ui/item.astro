---
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const variants = cva(
  "group/item flex items-center border border-transparent text-sm rounded-md transition-colors [a]:hover:bg-accent/50 [a]:transition-colors duration-100 flex-wrap outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border-border",
        muted: "bg-muted/50",
      },
      size: {
        default: "p-4 gap-4 ",
        sm: "py-3 px-4 gap-2.5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

interface Props extends VariantProps<typeof variants> {
  class?: string
  href?: string
}

const { class: className, variant, size, href, ...props } = Astro.props

const slot = await Astro.slots.render("default")
const hasSlot = slot.trim().length > 0

const Comp = href ? "a" : "div"
---

{
  hasSlot && (
    <Comp
      class={cn(variants({ variant, size }), className)}
      href={href}
      {...props}
    >
      <Fragment set:html={slot} />
    </Comp>
  )
}
