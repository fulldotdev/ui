---
import type { HTMLAttributes } from "astro/types"

import { cn } from "@/lib/utils"

interface Props extends HTMLAttributes<"div"> {
  side?: "left" | "right"
  variant?: "sidebar" | "floating" | "inset"
  collapsible?: "offcanvas" | "icon" | "none"
}

const {
  class: className,
  side = "left",
  variant = "sidebar",
  collapsible = "offcanvas",
  ...props
} = Astro.props

const slot = await Astro.slots.render("default")
---

{
  slot && (
    <div
      class="group peer text-sidebar-foreground hidden md:block peer-checked/sidebar-toggle:data-[state=expanded] peer-[:not(:checked)]/sidebar-toggle:data-[state=collapsed]"
      data-state="expanded"
      data-collapsible={collapsible !== "none" ? collapsible : undefined}
      data-variant={variant}
      data-side={side}
      data-slot="sidebar"
    >
      <!-- Sidebar gap -->
      <div
        data-slot="sidebar-gap"
        class={cn(
          "relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear",
          "peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]"
            : "peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=icon]:w-(--sidebar-width-icon)"
        )}
      />
      <!-- Sidebar container -->
      <div
        data-slot="sidebar-container"
        class={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          variant === "floating" || variant === "inset"
            ? "p-2 peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]"
            : "peer-[:not(:checked)]/sidebar-toggle:group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          data-slot="sidebar-inner"
          class="bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm"
        >
          <Fragment set:html={slot} />
        </div>
      </div>
    </div>
  )
}

