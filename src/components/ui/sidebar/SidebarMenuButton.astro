---
import type { HTMLAttributes } from "astro/types"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const variants = cva(
  "flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-2 focus-visible:outline-ring focus-visible:outline-offset-2 active:bg-accent active:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-accent hover:text-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--border))] hover:bg-accent hover:text-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm",
      },
      active: {
        true: "bg-accent font-medium text-accent-foreground",
        false: "",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      active: false,
    },
  }
)

type Props = VariantProps<typeof variants> &
  HTMLAttributes<"button"> &
  HTMLAttributes<"a"> & {
    href?: string
  }

const { class: className, variant, size, active, href, ...props } = Astro.props

const Comp = href ? "a" : "button"
const slot = await Astro.slots.render("default")
---

{
  slot && (
    <Comp
      data-slot="sidebar-menu-button"
      class={cn(variants({ variant, size, active }), className)}
      href={href}
      {...props}
    >
      <Fragment set:html={slot} />
    </Comp>
  )
}
