---
import type { CategorySchema } from 'fulldev-ui/schemas/layouts/category'
import type { DocSchema } from 'fulldev-ui/schemas/layouts/doc'
import type { PageSchema } from 'fulldev-ui/schemas/layouts/page'
import type { PostSchema } from 'fulldev-ui/schemas/layouts/post'
import type { ProductSchema } from 'fulldev-ui/schemas/layouts/product'
import '../styles/global.css'

interface Props extends PageSchema, PostSchema, ProductSchema, CategorySchema, DocSchema {
  logo?: any
  company?: any
}

const { title, description, image, meta, blocks, logo, company } = Astro.props

const url = Astro.url.href.endsWith('/') ? Astro.url.href : `${Astro.url.href}/`

// FIXME
const theme = 'light'
---

<!doctype html>
<html>
  <head>
    <!-- General -->
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1"
    />
    <title>{meta?.title ?? title}</title>
    <meta
      content={meta?.description ?? description}
      name="description"
    />
    <meta
      name="robots"
      content="index, follow"
    />
    <link
      rel="canonical"
      href={url}
    />
    <meta
      name="generator"
      content={Astro.generator}
    />
    <meta
      name="copyright"
      content={company}
    />
    <!-- OG -->
    <meta
      property="og:title"
      content={title}
    />
    <meta
      property="og:description"
      content={description}
    />
    <meta
      property="og:image"
      content={image?.src ?? blocks?.find((block) => block.image?.src)?.image?.src ?? logo?.src}
    />
    <meta
      property="og:url"
      content={url}
    />
    <meta
      property="og:type"
      content="website"
    />
    <meta
      name="og:site_name"
      content="IMDb"
    />
    <!-- Code -->
    <Fragment set:html={meta?.head} />
    <slot name="head" />

    <!-- Light / Dark theme -->
    <script is:inline define:vars={{ theme }}>
      function setTheme(document) {
        const value = localStorage.getItem('theme') || theme

        const isDark =
          value === 'dark' || (value === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)

        document.documentElement.classList.toggle('dark', isDark)

        document.querySelectorAll('.themer').forEach((themer) => {
          themer?.querySelectorAll('option').forEach((option) => {
            option.selected = option.value === value
          })
        })
      }

      function setOption(document) {
        const value = localStorage.getItem('theme') || theme

        document.querySelectorAll('.themer').forEach((themer) => {
          themer?.querySelectorAll('option').forEach((option) => {
            option.selected = option.value === value
          })
        })
      }

      setTheme(document)
      setOption(document)

      document.addEventListener('astro:before-swap', (event) => {
        setTheme(event.newDocument)
      })

      document.addEventListener('astro:page-load', (event) => {
        setOption(document)
      })
    </script>
  </head>
  <body class="bg-background text-foreground w-full font-sans text-base">
    <slot />
    <style set:html={meta?.css}></style>
    <Fragment set:html={meta?.body} />
  </body>
</html>

<style>
  @layer fulldev {
    html {
      width: 100%;
      height: 100%;
      color: var(--color-foreground);
      color-scheme: light;
      font-size: var(--text-base);
      line-height: var(--line-height-relaxed);
      font-family: var(--font-sans);
    }

    .dark {
      color-scheme: dark;
    }

    body {
      background-color: var(--color-background);
      width: 100%;
      color: var(--color-foreground);
      font-family: var(--font-sans);
    }
  }
</style>
