---
import type { HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Banner from 'fulldev-ui/blocks/Banner.astro'
import Footer from 'fulldev-ui/blocks/Footer.astro'
import Blocks from 'fulldev-ui/components/Blocks.astro'
import Head from 'fulldev-ui/components/Head.astro'
import Header from 'fulldev-ui/components/Header.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Sidebar from 'fulldev-ui/components/Sidebar.astro'
import Toc from 'fulldev-ui/components/Toc.astro'

type Props = Omit<CollectionEntry<'pages'>, 'data'> &
  CollectionEntry<'pages'>['data'] & {
    class?: HTMLAttributes<'body'>['class'] | undefined
    lang?: HTMLAttributes<'html'>['lang'] | undefined
    theme?: 'light' | 'dark' | undefined
    toc?: any
    sidebar?: any
    footer?: any
    navigation?: any
    banner?: any
  }

const {
  lang = 'nl',
  class: classes,
  render,
  header,
  navigation,
  footer,
  sidebar,
  toc,
  sections,
  code,
  theme,
  banner,
} = Astro.props
---

<!doctype html>
<html lang={lang}>
  <Head {...Astro.props} />
  <Root
    as="body"
    class={classes}
    {theme}
  >
    <slot name="banner">
      <Banner text={banner} />
    </slot>
    <slot name="header">
      <Header
        open={header}
        {...navigation}
        {...header}
      />
    </slot>
    <div class="core">
      <slot name="sidebar">
        <Sidebar
          open={sidebar}
          {...navigation}
          {...sidebar}
        />
      </slot>
      <main data-pagefind-body>
        <slot>
          <Blocks {...sections} />
        </slot>
      </main>
      <slot name="toc">
        <Toc
          {render}
          {...toc}
        />
      </slot>
    </div>
    <slot name="footer">
      <Footer {...footer} />
    </slot>
    <Fragment set:html={code} />

    <style lang="scss" is:global>
      @layer fulldev {
        * {
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1) 0.15s;
        }

        html {
          width: 100%;
          min-height: 100vh;
          scroll-behavior: smooth;
          color-scheme: var(--color-scheme);
          font-size: var(--text-2);
          font-family: 'Inter', sans-serif;
        }

        body {
          --screen: 100vw;

          background-color: var(--base-2);
          width: 100%;
          color: var(--base-11);

          .core {
            display: flex;
            position: relative;

            main {
              --screen: 1280px;

              display: flex;
              flex: 1;
              flex-direction: column;
              background-color: var(--color-background);
              width: 100%;
              max-width: 100vw;
              min-height: 100vh;
              overflow-x: hidden;
            }
          }
        }
      }
    </style>
  </Root>
</html>

<script>
  const setTheme = (document: Document) => {
    const theme = localStorage.getItem('theme') || ''
    document.body.classList.add(`theme-${theme}`)
  }

  setTheme(document)

  document.addEventListener('astro:before-swap', (event) => {
    setTheme(event.newDocument)
  })
</script>
