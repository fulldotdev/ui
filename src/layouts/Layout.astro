---
import type { HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Footer from 'fulldev-ui/blocks/Footer.astro'
import Header from 'fulldev-ui/blocks/Header.astro'
import Blocks from 'fulldev-ui/components/Blocks.astro'
import Head from 'fulldev-ui/components/Head.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Sidebar from 'fulldev-ui/components/Sidebar.astro'
import Toc from 'fulldev-ui/components/Toc.astro'

type Props = CollectionEntry<'pages'>['data'] & {
  class?: HTMLAttributes<'body'>['class']
  lang?: HTMLAttributes<'html'>['lang']
  render: CollectionEntry<'pages'>['render']
  theme?: 'light' | 'dark'
}

const {
  lang = 'nl',
  header,
  sidebar,
  sections,
  toc,
  footer,
  render,
  code,
  theme,
} = Astro.props
---

<!doctype html>
<html lang={lang}>
  <Head {...Astro.props} />
  <Root
    as="body"
    {theme}
  >
    <slot name="top">
      <Header {...header} />
    </slot>
    <div class="core">
      <slot name="left">
        <Sidebar {sidebar} />
      </slot>
      <main data-pagefind-body>
        <slot>
          <Blocks {...sections} />
        </slot>
      </main>
      <slot name="right">
        <Toc
          {toc}
          {render}
        />
      </slot>
    </div>
    <slot name="bottom">
      <Footer {...footer} />
    </slot>
    <Fragment set:html={code} />

    <style lang="scss" is:global>
      @layer fulldev {
        html {
          scroll-behavior: smooth;
          color-scheme: var(--color-scheme);
          font-size: var(--text-2);
          font-family: var(--font-family);
        }

        body {
          --screen: 100vw;

          display: flex;
          flex-direction: column;
          background-color: var(--color-background);
          color: var(--base-11);

          .core {
            --screen: 1280px;

            display: grid;
            grid-template-columns: 1fr;

            @media (min-width: 1024px) {
              grid-template-columns:
                [body-start]
                minmax(0, auto)
                [main-start]
                minmax(0, 1fr)
                [main-end]
                minmax(0, auto)
                [body-end];

              main {
                display: flex;
                grid-column: main-start / main-end;
                flex-direction: column;
              }
            }
          }
        }
      }
    </style>
  </Root>
</html>
