---
import type { HTMLAttributes } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Footer from 'fulldev-ui/blocks/Footer.astro'
import Blocks from 'fulldev-ui/components/Blocks.astro'
import Head from 'fulldev-ui/components/Head.astro'
import Navigation from 'fulldev-ui/components/Navigation.astro'
import Root from 'fulldev-ui/components/Root.astro'

type Props = Omit<CollectionEntry<'pages'>, 'data'> &
  CollectionEntry<'pages'>['data'] & {
    class?: HTMLAttributes<'body'>['class']
    lang?: HTMLAttributes<'html'>['lang']
    theme?: 'light' | 'dark'
  }

const {
  lang = 'nl',
  class: classes,
  navigation,
  render,
  sections,
  footer,
  code,
  theme,
} = Astro.props
---

<!doctype html>
<html lang={lang}>
  <Head {...Astro.props} />
  <Root
    as="body"
    class={classes}
    {theme}
  >
    <slot name="navigation">
      <Navigation
        {...navigation}
        {render}
      />
    </slot>
    <main data-pagefind-body>
      <slot>
        <Blocks {...sections} />
      </slot>
    </main>
    <slot name="footer">
      <Footer {...footer} />
    </slot>
    <Fragment set:html={code} />

    <style lang="scss" is:global>
      @layer fulldev {
        html {
          width: 100%;
          min-height: 100vh;
          scroll-behavior: smooth;
          color-scheme: var(--color-scheme);
          font-size: var(--text-2);
          font-family: var(--font-family);
        }

        body {
          --screen: 100vw;

          background-color: var(--color-background);
          width: 100%;
          min-height: 100vh;
          color: var(--base-11);

          @media (max-width: 767.999px) {
            &:has(#sidebar-checkbox:checked) {
              overflow: hidden;
            }
          }

          .sidebar ~ main {
            padding-left: var(--sidebar-width);
          }

          .toc ~ main {
            padding-right: var(--sidebar-width);
          }

          main {
            --screen: 1280px;

            display: flex;
            flex-direction: column;
            padding-top: var(--header-height);
            max-width: 100vw;
          }
        }
      }
    </style>
    <<<<<<< HEAD
    <style is:global>
      :root {
        --background-color: #ffffff;
        --text-color: #000000;
      }

      .theme-dark {
        --background-color: #111110;
        --text-color: #ffffff;
      }

      body {
        background-color: var(--background-color);
        color: var(--text-color);
      }
    </style>
  </Root>
  =======

  >>>>>>> origin/0.5
</html>

<script define:vars={{ defaultTheme }}>
  function setTheme(theme) {
    document.documentElement.classList.remove('theme-light', 'theme-dark')
    document.documentElement.classList.add(`theme-${theme}`)
    document.body.classList.remove('theme-light', 'theme-dark')
    document.body.classList.add(`theme-${theme}`)
  }

  function getStoredTheme() {
    const storedTheme = document.cookie
      .split('; ')
      .find((row) => row.startsWith('fullui_theme='))
    return storedTheme ? storedTheme.split('=')[1] : defaultTheme
  }

  document.addEventListener('DOMContentLoaded', () => {
    const theme = getStoredTheme()
    setTheme(theme)
  })

  setTheme(getStoredTheme())

  document.addEventListener('themeChanged', (event) => {
    setTheme(event.detail.theme)
  })
</script>
