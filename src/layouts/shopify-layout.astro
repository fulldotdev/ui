---
import type {
  Collection,
  Metaobject,
  Page,
  Product,
} from "@shopify/hydrogen-react/storefront-api-types"
import type { ComponentProps } from "astro/types"

import { requestShopify } from "@/lib/shopify"
import Block from "@/components/misc/block.astro"
import Layout from "@/components/misc/layout.astro"

interface Props extends ComponentProps<typeof Layout> {}

const { metaobject } = (await requestShopify(
  `#graphql
  query {
    metaobject(handle: {handle: "base", type: "layout"}) {
      fields {
        key
        value
        references(first: 50) {
          nodes {
            ... on Metaobject {
              fields {
                key
                value
              }
            }
          }
        }
      }
    }
  }
`
)) as { metaobject: Partial<Metaobject> | null }

const footerMenuNodes = metaobject?.fields?.find(
  (field) => field.key === "footer"
)?.references?.nodes as Partial<Metaobject>[]

const footerMenus = footerMenuNodes.map((menu) => ({
  text: menu?.fields?.find((field) => field.key === "title")?.value,
  links: JSON.parse(
    menu?.fields?.find((field) => field.key === "links")?.value ?? "[]"
  ).map((link: any) => ({
    text: link.text,
    href: link.url,
  })),
}))

const headerMenuNodes = metaobject?.fields?.find(
  (field) => field.key === "header"
)?.references?.nodes as Partial<Metaobject>[]

const headerMenus = headerMenuNodes.map((menu) => ({
  text: menu?.fields?.find((field) => field.key === "title")?.value,
  links: JSON.parse(
    menu?.fields?.find((field) => field.key === "links")?.value ?? "[]"
  ).map((link: any) => ({
    text: link.text,
    href: link.url,
  })),
}))

const banner = JSON.parse(
  metaobject?.fields?.find((field) => field.key === "banner")?.value ?? "[]"
)

const { pages, collections, products } = (await requestShopify(
  `#graphql
  query {
    pages(first: 250) {
      nodes {
        handle
        title
      }
    }
    collections(first: 250) {
      nodes {
        handle
        title
      }
    }
    products(first: 250) {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        id
        handle
        title
      }
    }
  }
`
)) as {
  pages: Partial<Page>[] | null
  collections: Partial<Collection>[] | null
  products: Partial<Product>[] | null
}

console.log("end cursor", products?.pageInfo?.hasNextPage)

const { products: secondProducts } =
  products?.pageInfo?.hasNextPage &&
  ((await requestShopify(
    `#graphql
  query {
    products(first: 250, after: "${products?.pageInfo?.endCursor}") {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        handle
        title
      }
    }
  }
`
  )) as {
    products: Partial<Product>[] | null
  })

const { products: thirdProducts } =
  secondProducts?.pageInfo?.hasNextPage &&
  ((await requestShopify(
    `#graphql
  query {
    products(first: 250, after: "${secondProducts?.pageInfo?.endCursor}") {
      pageInfo {
        endCursor
        hasNextPage
      }
      nodes {
        handle
        title
      }
    }
  }
`
  )) as {
    products: Partial<Product>[] | null
  })

const search = [
  ...(pages?.nodes ?? []),
  ...(collections?.nodes ?? []),
  ...(products?.nodes ?? []),
  ...(secondProducts?.nodes ?? []),
  ...(thirdProducts?.nodes ?? []),
].map((node) => ({
  text: node.title,
  href: `/${node.handle}`,
}))

console.log(search.length)
---

<Layout {...Astro.props}>
  <Block type="banner" variant={1} items={banner} />
  <Block type="header" variant={2} search={search} menus={headerMenus} />
  <main>
    <slot />
  </main>
  <Block type="footer" variant={1} menus={footerMenus} />
</Layout>
