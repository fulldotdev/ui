---
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import Intro1 from 'fulldev-ui/blocks/Intro1.astro'
import Products1 from 'fulldev-ui/blocks/Products1.astro'
import Carousel from 'fulldev-ui/components/Carousel.astro'
import Element from 'fulldev-ui/components/Element.astro'
import Prose from 'fulldev-ui/components/Prose.astro'
import Select from 'fulldev-ui/components/Select.astro'
import Layout from 'fulldev-ui/layouts/Layout.astro'
import { getHref } from 'fulldev-ui/utils/getHref'

type Props = CollectionEntry<'categories'>

const { render, slug } = Astro.props
const { title, description } = Astro.props.data

const categories = await getCollection('categories', ({ data }) =>
  data.categories?.some((c) => c.slug.includes(slug))
)

const products = await getCollection('products', ({ data }) =>
  data.categories?.some((c) => c.slug.includes(slug))
)

const sorts = [
  {
    option: 'Aanbevolen',
    products: [...products].sort(
      (a, b) => (a.data.order || 0) - (b.data.order || 0)
    ),
  },
  {
    option: 'Prijs (laag - hoog)',
    products: [...products].sort(
      (a, b) => (a.data.price || 0) - (b.data.price || 0)
    ),
  },
  {
    option: 'Prijs (hoog - laag)',
    products: [...products].sort(
      (a, b) => (b.data.price || 0) - (a.data.price || 0)
    ),
  },
  {
    option: 'Alfabetisch (A-Z)',
    products: [...products],
  },
  {
    option: 'Alfabetisch (Z-A)',
    products: [...products].sort((a, b) =>
      (b.data.title || '').localeCompare(a.data.title || '')
    ),
  },
]
---

<script>
  document.addEventListener('astro:page-load', () => {
    const sort = document.querySelector('.sort')

    sort?.addEventListener('change', (e) => {
      const blocks = document.querySelectorAll('.products')
      const value = (e.target as HTMLSelectElement).value
      blocks?.forEach((block) => block.classList.add('hide'))

      const block = document.querySelector(`.products[id='${value}']`)
      block?.classList.remove('hide')
    })
  })
</script>

<Layout {...Astro.props}>
  <Intro1
    heading={title}
    text={description}
  />
  <Carousel>
    {
      categories.map((category) => (
        <Element
          as="a"
          class:list="item"
          href={getHref('categories', category.slug)}
        >
          {category.data.title}
        </Element>
      ))
    }
  </Carousel>
  <Element class:list="toolbar">
    <span>{products.length} resultaten</span>
    <Select
      class:list="sort"
      size="sm"
      name="Sorteren"
      options={sorts.map((sort) => sort.option)}
    />
  </Element>
  {
    sorts.map((sort: any) => (
      <Products1
        class:list={sort.option !== 'Aanbevolen' ? 'hide' : ''}
        products={sort.products}
      />
    ))
  }
  <Prose {render} />
  <slot />
</Layout>

<style is:global>
  .carousel {
    .item {
      @apply min-w-48 rounded-sm border p-4 text-sm;
    }
  }

  .products.hide {
    @apply hidden;
  }

  .toolbar {
    @apply container flex items-center justify-between pt-8;

    span {
      @apply text-sm text-muted-foreground;
    }
  }
</style>
