---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import Button from 'fulldev-ui/components/Button.astro'
import Element from 'fulldev-ui/components/Element.astro'

interface Props
  extends HTMLAttributes<'aside'>,
    Pick<ComponentProps<typeof Button>, 'variant' | 'size' | 'text' | 'icon'> {
  id: string
  icon: string
}

const { id, variant = 'ghost', size = 'md', icon, text, ...rest } = Astro.props

const slot = await Astro.slots.render('default')
const render = slot?.trim().length > 0
---

{
  render && (
    <Element class:list="drawer">
      <Button
        class="drawer-button"
        role="button"
        for={id}
        {variant}
        {size}
        {text}
        {icon}
      />

      <input
        type="checkbox"
        class="drawer-checkbox"
        name={id}
        {id}
      />

      <Element
        class:list="drawer-body"
        as="aside"
        {...rest}
      >
        <Fragment set:html={slot} />
      </Element>
      <label
        for={id}
        class="drawer-backdrop"
      />
    </Element>
  )
}

<style is:global>
  @layer fulldev {
    .drawer {
      @apply contents h-screen;
    }

    .drawer-checkbox {
      @apply invisible hidden;
    }

    .drawer-backdrop {
      @apply pointer-events-none invisible fixed left-0 top-0 z-30 h-screen w-full bg-black opacity-0 transition-opacity;

      &:is(.drawer-checkbox:checked ~ &) {
        @apply pointer-events-auto visible opacity-50;
      }
    }

    .drawer-body {
      @apply fixed bottom-0 left-0 top-0 z-40 h-screen w-80 max-w-[75vw] -translate-x-full overflow-y-auto rounded-r-lg border border-l-0 bg-background shadow-2xl transition-transform;
      @apply scrollbar scrollbar-track-transparent scrollbar-thumb-accent scrollbar-thumb-rounded-full scrollbar-w-2 hover:scrollbar-thumb-accent-hover;

      &:is(.drawer-checkbox:checked ~ &) {
        @apply translate-x-0;
      }
    }
  }
</style>
