{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "astro",
  "type": "registry:file",
  "dependencies": [
    "@astrojs/react",
    "@astrojs/sitemap",
    "astro-seo",
    "astro",
    "astro-robots-txt",
    "astro-favicons",
    "remeda",
    "shadcn",
    "typescript"
  ],
  "files": [
    {
      "path": ".cloudcannon/initial-site-settings.json",
      "content": "{\n  \"ssg\": \"astro\",\n  \"mode\": \"hosted\",\n  \"build\": {\n    \"install_command\": \"pnpm i\",\n    \"build_command\": \"pnpm build\",\n    \"output_path\": \"dist\",\n    \"preserved_paths\": \"node_modules/\",\n    \"preserve_output\": false,\n    \"include_git\": false,\n    \"manually_configure_urls\": false,\n    \"hugo_version\": \"0.128.1\",\n    \"ruby_version\": \"2.7.3\",\n    \"node_version\": \"20\",\n    \"deno_version\": \"1.40.2\"\n  }\n}\n",
      "type": "registry:file",
      "target": "~/.cloudcannon/initial-site-settings.json"
    },
    {
      "path": ".vscode/settings.json",
      "content": "{\n  \"tailwindCSS.experimental.configFile\": \"./src/styles/globals.css\",\n  \"tailwindCSS.experimental.classRegex\": [\n    [\"cva\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"[\\\"'`]?([^\\\"'`]+)[\\\"'`]?\"],\n    [\"cn\\\\(((?:[^()]|\\\\([^()]*\\\\))*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n  ],\n  \"files.associations\": {\n    \"*.css\": \"tailwindcss\"\n  },\n  \"editor.quickSuggestions\": {\n    \"strings\": \"on\"\n  }\n}\n",
      "type": "registry:file",
      "target": "~/.vscode/settings.json"
    },
    {
      "path": "public/images/placeholder.webp",
      "content": "RIFF�\r\u0000\u0000WEBPVP8L�\r\u0000\u0000/���\u0000�@&m�_��t6Ȥm��ݿ\u00142i\u001b��w6���\u0016�%�C\u0004H�\u0003E]\b���m\u001bI��W�ʈ�\u0000\u000fO��_n�(\r\nxz϶mI�$I�}\u0000��7\u000f��s�#B�\t\u0010\u0000�C\\+\"�?\u0001\nڶa0�?�?G�\u0002���������������������������������������������������������������������������������������������)�Vr��_�s�Zc�u�\u000f!��k��\u0010�%yg�\u0007��1����-����[�����9X�4���W\u0006�t\u0011&�bᯋ�,fk|\u001e_\u0015\\���M(�9ѓ��ml\u001f\u0012#Y<\"��_\u0010�\u001d�ԥ�������4>\u001bz <�M���8<���������\t�c\u0011)�O�b��6��A�XN_�\f�Œ��\u001f\u0005�`]C� �\u0006k���@1X_��;�9�1��\r0<\u0016:��\u001fG,��^~��ޮ���Ś����u�南\tKo�ۮ;,�-o:��B�^s�`\u0017���㈝����,63��-b?)�[l�)���mu�6\u001cv֏�Y%ln�Y����&\u001b\u000e[|��X!�r�wX�F��\u0002\u001b\u0016{}��W5�mJﮌ\u001d���\u0015��_Z�b�Mye5��{~_el�)o�������\u000b'��{jX\u001c_R��\u0018RyEU�I��~�8����\"�c�W�ǉ4���\u0017\u000eez+�ñt��\u0016\u0007��\u000bi\u0018���o�N8����\u001aဦ7Q�\u0019��5TpJM}\t\u0015\u001c��\n*8�\u0017�2\u000e�io����=\u0019'��\u0017Oƙ5���ql�K'���WN��u�}Spx��m\n�oz�\u0014�`�/��3l�k��\u0014S{�4:F@~�t�I\u000e/�ap�\u001d�]��4��na��L���p�Ӌ��P��J�����\u0012q��x�d\u001cmjӝ�&\r�;�K�9`\bo\u001268�\u0017�F����\u0016�8榿C\"\u000e:�7H�Y�Ӟ\u0014è9^�\u001a\u0002\u0019뮐�8\u0011��\u001b�N��\u0013�K�R;\flp�>���/�ד�p�\u001d���\f����\u0014\u0004\u001cz�z�y�ի\u001e��co�\u0012h\u0017����Wq�i����]߼A'\u000fT�/\u0011~0�α��/��,~�ԍ�p���e�nڶ\b\u0001�r�\u001e��x�2D0I]7�m�v�A\b��5¯SݯAR\u0000/q�0��[l!�^�\n�7�C\u0012/\u0016��Y��J�EǢ�i\u001a�\u001bU ��\u0005m\u0018̓�6u\u0012\u0007X\u00163����Mb\u000b��,e\u001es�6�C$͐��٦-�\u0010J3$��t�6�A,M\u00170��\u001a�\u001e6r\u0001��1�=\u0017$��p1M\tcs\"d�t�\n��7\u0015�I]�:f]wf�x��`�i���\u0010Pjb50�/\u0001\"JM��Įm�\u0010Rj2Řyߔ\u000e1�&RyjqO��\t�I����\u0013\u000fI�.O\u001ds�;� ���)N.lH��R�&39�\u000f6�\u0002�ei`�m;.\b�颔��v#Ad͐�0�k3\u001a��\fA2ӣ�`#50C�\u0018��[�!����=@ى\fɵ,D�\u0001�F\f\u0012\u001d8���\u0000a#,�ױ\b�\u0007p�\u0010!��\b�\u00070�P!�^��9a� x\u00012\u000f�]� �A�%Hq\u0014\u001f<!oA�\u001c'\u001d�F�������A\u000fQ.�c�H�0\u0017ѱ\u000f@\u001b�I��$�=��\u0000\u000bq�&8�\u0001��E\b4u�I\u000f\u0010��B��\u0010��\u0000i���\u0014,KM{��z\u001eR�Xh�\u0001��\u0015��%4��\u001e�k?H�\u0010�&L�Z�\u000b�\u001de�L/�]�p'�\u0019�kK�!�Ybn;9����\u0017���Ʌ��\u0010pj\u0002�'WW�Aĩ��m�f�g#c0,/yjq�\u0002�ܲ�����\u0015��%.w���ם��!�˘X[�\u000b����\u000eӺ�u�\u0010�,-}Zu�:I\u001b���aR�^w\u0007q�&,Ls\u001a� �4d��SJ��w��eY�݄��V���e�|ںEH����L'��� �QV�0��^w+xȲ�v*��-B�����L����\r�O]T�N�h���\u0011>\u0018\u0016��M���\u001e!��E宓���W(@/+w�\u0019�{��h\u0000DY���9j��\u0007��,+��?f���\u0015Z�����.�\u0017��\u001a�.+��(�K\u001f�\u0007\r\u000b����v/}�&t�rߙ~!�k�F\u0015 �����]�^|\u000fe��徻�SW�W�@\u001d\u0016y�����o��3�\u00034����\u001f0��\u001b�\u0010\rK�}�-�bB���@%:���{do�\u0013�ߛȤ\u0013���r��_�\u001a2�:\u001fs�{#=�b���-ЋE'�Q\f�U��f4��\nt��Gl�\u0003�:�P�Y\u0019\u0015(Ȫ��h\b\u001a�(@EZ�C\u0015Jҫ!6Z\u0002I\u000b\u0005�ɢ�*\u0014%u\r�FS��\u0002\nЕ���ЖQ��Q\u0017(�'@av�S�1\r+\u001e6*\u0003��\tP�Q�4�͢t��\r�:'BqZ�8\r��k\u001c�;��M���ڦC}�P6V���IР^�t�мf��\u001c���1D\u0004��\u0018�\u0010S����*\u0011��\u001a5����\u001b�S�C\u001a\u0012���U�.�\u001f�!7\u0016�\u000e=z�����gm�M\u0004�\"A\\\u001c.���m(|�\u0012TiY\u0018.�0M����Х4\u0016�˅ْ���9e\u0002�+�\u0002a�&�\u0003��N�rp2�9�z�:\u0014j^�\u0011\tӧPO��(�\u000b�\u0003\u001e�B=e\u0019*��*p��R�'l@��EH�������*H+P\f��B;[\u0019z�=\u001e{<��|�\u0006)\u0016�\u000fW\b�\u001eکrЬף����r�2tkz�BXA��8\rR.��\u0015��\u0014�a��]i<�pX��OR�~u�T\r\u0016��h��A|��\u0005��\u0010]P��i��r�2t,�g\u0019\u0016�j��\u0019�d�\u001e�\u001b�����A��\u0007)��u��d(��\u0018\u0019\u000b���д�\u000f\u0011��W?4N��=��2\u0007>1\t�6=��BS��ҡn����Z�|Z��1<9vXn[�J�½��\u0016+��9�P�ifl��O��9h�b�e7��D(]ób��w�4�]?)�X�����\u001d�)���S>\u001c\u0011��O�\u001dvж�Ѡz-���&\u0006>\u0016lt\u000f�t.l�)�\"@���x�\u001fG�B�ҘJ�^R>\u0010l�\u000f�L\u0012����ࡁ�<\nv4\u001d�\u0002\u001d\\gQ�����AJ��\u001c\u001am\n\u0010�\u001c\\���\u0014:a_m;\u0005\u0019z8O�\r�6��\u000eM��asm?\u0001V\u0015Y����M�\u0017��Ï%��נ��O\u0015lr�:6��\u000f5l�\u001b\u001b硏��\f�O��m\u0005\u001a9�\n[l��=\u001b���~�c�M�2\u0007�l�'\u0012�;nX�V\u000e�P��n�V�^.�Ӗ��^�QL��-v��Nyh��]�w��)C7翕��y�:)'��T�����B;�?�i�`�\u000eE���g��\u0000�������x\u001c��7�IE\u0019�\u001b\u0019�д������h8�yg\u0012�t�\u0003l\u000e\u0002<oK�����<����FO�����HeO.h��\u001a�cܑ\u0004]��\t�\u0003\u00017��BY[�\u0017\u0017�$��`��\u0010�A©L{ᠯ��p.=oD��6�_��\u0001;��@e��\nG��&\f�Y(\u0007\u0006H[�\u0016J�Ɖ��\r\bP�ב�\u001d˗���\u0001��kP���\u0000y���.wh\u0010V�Ay�C\u0003��\u0016�����鋖����\u0001�%k����\u0000i�\u0006�0�c\u0003ϫ�\u0016:������������J���܀�B\u0015(r��\u0006H�Ԡ���AX�A�\f����\n��2'>90}�.�st@uy\"\u0014z9:@^�\u0004�N|v��&C���\u0003�0\u0015Z=\u001f\u001e8^�Nj�����5\u0019\u0006z�:=��\"l����\u0001�z��j�q|�V�\u001d��u~\u0010\u0016�z��\u0007\u0017���~�q~`�:\u0004h��\u0000��U\b��9�@u\r\"�<e\u0010�W �[1=_��bx���EǏ\u0016��hǃ\u0005|3��X\u0001_�T\u001f���1?\u0011;|:��a����4�����4�\u0007�\u001d\u000fR\b���=F�W$������O�\u000e��a~��c���e|O�13\u000e��4}^�⛒ʬ2�+Ӕ�����|����\u001d�a��KӦR\b_�y\u001e���y\u000e�\b���Ϡ\u0018|j�k\u000e_�n�T����;��G�)�Q,><M\u001cm$��OW��p��\tJ��_�\u0012\b\u001f�.�S���(]17�㚣×�q>��rN1\u0006�\b������������������������������������������������������������������������������������������������\u0013\u0013\u0000",
      "type": "registry:file",
      "target": "~/public/images/placeholder.webp"
    },
    {
      "path": "public/favicon.svg",
      "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n  <circle cx=\"50\" cy=\"50\" r=\"49\" fill=\"currentColor\" />\n</svg>\n",
      "type": "registry:file",
      "target": "~/public/favicon.svg"
    },
    {
      "path": "src/components/block.astro",
      "content": "---\nimport { getCollection } from \"astro:content\"\n\nimport { getEntryByPath, getItemByEntry } from \"@/lib/collections\"\nimport type { BlockSchema } from \"@/lib/schemas\"\nimport { Block as ReactBlock } from \"@/components/block\"\n\ntype Props = BlockSchema\n\nconst { children, glob, references, items, ...props } = Astro.props\n\n// Get all entries from the paths\nconst referenceEntries = references\n  ? await Promise.all(\n      references.map(async (path) => {\n        return await getEntryByPath(path)\n      })\n    )\n  : []\n\n// Get all entries from the collection\nconst globEntries = glob\n  ? await getCollection(\"content\", (entry) => entry.id.startsWith(glob))\n  : []\n\n// Merge the path entries with the collection entries\nconst allEntries = [...(referenceEntries ?? []), ...(globEntries ?? [])]\n\n// Transform the entries into items\nconst entryItems = allEntries\n  .map((entry) => {\n    if (!entry) return undefined\n    return getItemByEntry(entry)\n  })\n  .filter((item) => item !== undefined)\n---\n\n<ReactBlock client:load {...props} items={[...entryItems, ...(items ?? [])]}>\n  <slot />\n  <Fragment set:html={children} />\n</ReactBlock>\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/block.tsx",
      "content": "import type { BlockProps } from \"@/lib/types\"\n\n// Get all blocks as an object\nconst blockImports = import.meta.glob(\"../blocks/**/*.tsx\", {\n  eager: true,\n})\n\n// Render all blocks\nfunction Block({\n  block,\n  ...props\n}: BlockProps & {\n  block?: string\n}) {\n  // Find the block in the blockImports object\n  const blockPath = `../blocks/${block}.tsx`\n  const blockImport = blockImports[blockPath] as any\n  const BlockComponent = blockImport?.default\n\n  // Render the block\n  return BlockComponent ? <BlockComponent {...props} /> : null\n}\n\nexport { Block }\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/layout.astro",
      "content": "---\nimport { Font } from \"astro:assets\"\n\nimport type { EntrySchema } from \"@/lib/schemas\"\nimport Block from \"@/components/block.astro\"\n\nimport \"@/styles/globals.css\"\n\nimport { SEO } from \"astro-seo\"\n\ntype Props = EntrySchema\n\nconst {\n  block,\n  title,\n  description,\n  image,\n  seo,\n  blocks,\n  name,\n  banner,\n  header,\n  footer,\n  ...data\n} = Astro.props\n---\n\n<!doctype html>\n<html class=\"layout light\" lang=\"nl\">\n  <head>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"generator\" content={Astro.generator} />\n    <SEO\n      charset=\"UTF-8\"\n      title={seo?.title || title}\n      description={seo?.description || description}\n      canonical={Astro.url.href.endsWith(\"/\")\n        ? Astro.url.href\n        : Astro.url.href + \"/\"}\n      openGraph={{\n        basic: {\n          title: seo?.title || title || \"\",\n          image: Astro.url.origin + image?.src,\n          type: \"website\",\n          url: Astro.url.href,\n        },\n        image: {\n          url: Astro.url.origin + image?.src,\n          alt: image?.alt,\n        },\n        optional: {\n          description: seo?.description || description,\n          siteName: name,\n        },\n      }}\n    />\n    <Font cssVariable=\"--font-sans\" preload />\n    <Font cssVariable=\"--font-serif\" preload />\n    <Fragment set:html={seo?.head} />\n  </head>\n  <body\n    class=\"text-foreground bg-background group/body overscroll-none font-sans antialiased\"\n  >\n    <div class=\"bg-background relative z-10 flex min-h-svh flex-col\">\n      <Block {...banner} />\n      <Block {...header} />\n      {\n        block ? (\n          <Block\n            block={block}\n            title={title}\n            description={description}\n            image={image}\n            menus={header?.menus}\n            {...data}\n          >\n            <slot />\n          </Block>\n        ) : (\n          <slot />\n        )\n      }\n      {blocks?.map((block) => <Block {...block} />)}\n      <Block {...footer} />\n    </div>\n    <style set:html={seo?.css}></style>\n    <Fragment set:html={seo?.body} />\n  </body>\n</html>\n",
      "type": "registry:component"
    },
    {
      "path": "src/lib/collections.ts",
      "content": "import { getEntry, type CollectionEntry } from \"astro:content\"\n\n// Get the href for an entry in the content collection\nexport function getHrefByEntry({ id, data }: CollectionEntry<\"content\">) {\n  // Only return href if published is true and the entry is not in the future\n  const todayDate = new Date()\n  const publishedDate = data.published\n  const isPublished = publishedDate && publishedDate < todayDate\n  if (!isPublished) return undefined\n  if (id === \"index\") return \"/\"\n  return id\n}\n\n// Get an entry by path\nexport async function getEntryByPath(path: string) {\n  const collectionAndId = path.split(\"/src/content/\")[1].split(\".\")[0]\n  const collection = collectionAndId.split(\"/\")[0]\n  const id = collectionAndId.replace(`${collection}/`, \"\")\n  return await getEntry(\"content\", id)\n}\n\n// Transform an entry to an item\nexport function getItemByEntry(entry: CollectionEntry<\"content\">) {\n  return {\n    href: getHrefByEntry(entry),\n    ...entry.data,\n  }\n}\n",
      "type": "registry:file",
      "target": "~/src/lib/collections.ts"
    },
    {
      "path": "src/lib/schemas.ts",
      "content": "import { z } from \"astro:content\"\n\nexport const pathSchema = z.string().startsWith(\"/src/content/\")\n\nexport const channelSchema = z\n  .object({\n    type: z.enum([\"email\", \"phone\", \"address\", \"website\"]),\n    value: z.string(),\n  })\n  .partial()\n  .strict()\n\nexport const imageSchema = z\n  .object({\n    src: z.string(),\n    alt: z.string(),\n    title: z.string(),\n  })\n  .partial()\n  .strict()\n\nexport const linkSchema = z\n  .object({\n    href: z.string(),\n    text: z.string(),\n    variant: z.enum([\"default\", \"outline\", \"secondary\", \"ghost\", \"link\"]),\n    size: z.enum([\"default\", \"sm\", \"lg\", \"icon\"]),\n  })\n  .partial()\n  .strict()\n\nexport const menuSchema = linkSchema\n  .extend({\n    links: linkSchema.array(),\n  })\n  .partial()\n  .strict()\n\nexport const seoSchema = z\n  .object({\n    title: z.string(),\n    description: z.string(),\n    image: z.any(),\n    code: z.string(),\n    head: z.string(),\n    body: z.string(),\n    css: z.string(),\n  })\n  .partial()\n  .strict()\n\nexport const hoursSchema = z\n  .object({\n    title: z.string(),\n    description: z.string(),\n    ma: z.string(),\n    di: z.string(),\n    wo: z.string(),\n    do: z.string(),\n    vr: z.string(),\n    za: z.string(),\n    zo: z.string(),\n  })\n  .partial()\n  .strict()\n\nexport const formSchema = z\n  .object({\n    inbox: z.string(),\n    action: z.string(),\n    fields: z.any(),\n    submit: z.string(),\n    description: z.string(),\n  })\n  .partial()\n  .strict()\n\nexport const subscriptionSchema = z\n  .object({\n    month: z.number(),\n    year: z.number(),\n    twoyears: z.number(),\n  })\n  .partial()\n  .strict()\n\nexport const itemSchema = z\n  .object({\n    // Config\n    layout: z.string(),\n    block: z.string(),\n    reverse: z.boolean(),\n    // Options\n    published: z.date(),\n    // Base\n    name: z.string(),\n    title: z.string(),\n    description: z.string(),\n    href: z.string(),\n    tagline: z.string(),\n    icon: z.enum([\"check\", \"cross\"]),\n    rating: z.number().min(0).max(5).step(0.25).nullable(),\n    unit: z.string(),\n    price: z.number().nullable(),\n    comparePrice: z.number().nullable(),\n    // Images\n    link: linkSchema,\n    links: linkSchema.array(),\n    menu: menuSchema,\n    menus: menuSchema.array(),\n    channels: channelSchema.array(),\n    socials: z.string().array(),\n    list: z.string().array(),\n    tags: z.string().array(),\n    subscription: subscriptionSchema,\n    hours: hoursSchema,\n    form: formSchema,\n    // Objects and arrays\n    image: imageSchema,\n    images: imageSchema.array(),\n    avatar: imageSchema,\n    avatars: imageSchema.array(),\n    logo: imageSchema,\n    logos: imageSchema.array(),\n    // Richtext\n    children: z.any(),\n  })\n  .partial()\n  .strict()\n\nexport const blockSchema = itemSchema\n  .extend({\n    items: itemSchema.array(),\n    glob: z.string(),\n    references: pathSchema.array(),\n  })\n  .partial()\n  .strict()\n\nexport const pageSchema = blockSchema\n  .extend({\n    banner: blockSchema,\n    header: blockSchema,\n    blocks: blockSchema.array(),\n    seo: seoSchema,\n    footer: blockSchema,\n  })\n  .partial()\n  .strict()\n\nexport type FormSchema = z.infer<typeof formSchema>\nexport type ItemSchema = z.infer<typeof itemSchema>\nexport type BlockSchema = z.infer<typeof blockSchema>\nexport type EntrySchema = z.infer<typeof pageSchema>\n",
      "type": "registry:file",
      "target": "~/src/lib/schemas.ts"
    },
    {
      "path": "src/lib/types.ts",
      "content": "import type { FormSchema, ItemSchema } from \"@/lib/schemas\"\n\nexport type BlockProps = ItemSchema & {\n  items?: ItemSchema[]\n  form?: FormSchema\n}\n",
      "type": "registry:file",
      "target": "~/src/lib/types.ts"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function money(\n  amount: number,\n  currency: string = \"EUR\",\n  locale: string = \"nl-NL\"\n) {\n  return new Intl.NumberFormat(locale, {\n    style: \"currency\",\n    currency: currency,\n  }).format(amount)\n}\n\nexport function discount(before: number, after: number) {\n  return `-${Math.round(((before - after) / before) * 100)}%`\n}\n",
      "type": "registry:file",
      "target": "~/src/lib/utils.ts"
    },
    {
      "path": "src/pages/[...entry].astro",
      "content": "---\nimport { getCollection, getEntry, render } from \"astro:content\"\n\nimport { getHrefByEntry } from \"@/lib/collections\"\nimport Layout from \"@/components/layout.astro\"\n\nexport async function getStaticPaths() {\n  const entries = await getCollection(\"content\")\n  return entries\n    .map((entry) => {\n      const href = getHrefByEntry(entry)\n      if (!href) return undefined\n      return {\n        params: {\n          entry: href === \"/\" ? undefined : href,\n        },\n        props: {\n          ...entry,\n          frontmatter: entry.data,\n        },\n      }\n    })\n    .filter(Boolean)\n}\n\nconst { Content } = await render(Astro.props)\nconst { id, data } = Astro.props\n\n// Get the index layout, which applies to all pages\nconst indexLayout = await getEntry(\"layouts\", \"index\")\n\n// Get the layout for the current page\nconst folder = id.split(\"/\").length > 1 ? id.split(\"/\")[0] : undefined\nconst layout = data.layout || folder\nconst entryLayout = layout ? await getEntry(\"layouts\", layout) : undefined\n\n// // Merge the layouts with the entry\nconst merged = {\n  ...indexLayout?.data,\n  ...entryLayout?.data,\n  ...data,\n  blocks: [\n    ...(data?.blocks ?? []),\n    ...(entryLayout?.data.blocks ?? []),\n    ...(indexLayout?.data.blocks ?? []),\n  ],\n}\n---\n\n<Layout {...merged}>\n  <Content />\n</Layout>\n",
      "type": "registry:file",
      "target": "~/src/pages/[...entry].astro"
    },
    {
      "path": "src/content.config.ts",
      "content": "import { defineCollection } from \"astro:content\"\nimport { file, glob } from \"astro/loaders\"\nimport { pageSchema } from \"src/lib/schemas\"\n\nexport const collections = {\n  layouts: defineCollection({\n    loader: file(\"src/data/layouts.yaml\"),\n    schema: pageSchema,\n  }),\n  content: defineCollection({\n    loader: glob({\n      pattern: \"**/[^_]*.{md,mdx}\",\n      base: `src/content`,\n    }),\n    schema: pageSchema,\n  }),\n}\n",
      "type": "registry:file",
      "target": "~/src/content.config.ts"
    },
    {
      "path": ".editorconfig",
      "content": "# editorconfig.org\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 2\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n",
      "type": "registry:file",
      "target": "~/.editorconfig"
    },
    {
      "path": ".gitignore",
      "content": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\nnode_modules\n.pnp\n.pnp.js\n\n# astro\n.astro/\ndist/\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# local env files\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\n# ide\n.idea\n.fleet\n.vscode\n\n",
      "type": "registry:file",
      "target": "~/.gitignore"
    },
    {
      "path": ".prettierignore",
      "content": "# folders\n.astro/\n.netlify/\ndist/\n.stackbit/\nnode_modules/\n\n# logs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\n\n# Lock files\npnpm-lock.yaml\npackage-lock.json\nyarn.lock\nbun.lockb\n\n# misc\n**/.DS_Store",
      "type": "registry:file",
      "target": "~/.prettierignore"
    },
    {
      "path": "astro.config.ts",
      "content": "import react from \"@astrojs/react\"\nimport sitemap from \"@astrojs/sitemap\"\nimport tailwindcss from \"@tailwindcss/vite\"\nimport favicons from \"astro-favicons\"\nimport robotsTxt from \"astro-robots-txt\"\nimport { defineConfig, fontProviders } from \"astro/config\"\n\n// https://astro.build/config\nexport default defineConfig({\n  site: \"https://ui.full.dev\",\n  experimental: {\n    fonts: [\n      {\n        provider: fontProviders.google(),\n        name: \"Geist\",\n        cssVariable: \"--font-sans\",\n        weights: [\n          \"100\",\n          \"200\",\n          \"300\",\n          \"400\",\n          \"500\",\n          \"600\",\n          \"700\",\n          \"800\",\n          \"900\",\n        ],\n      },\n      {\n        provider: fontProviders.google(),\n        name: \"Geist\",\n        cssVariable: \"--font-serif\",\n        weights: [\n          \"100\",\n          \"200\",\n          \"300\",\n          \"400\",\n          \"500\",\n          \"600\",\n          \"700\",\n          \"800\",\n          \"900\",\n        ],\n      },\n    ],\n  },\n  prefetch: {\n    prefetchAll: true,\n  },\n  devToolbar: {\n    enabled: false,\n  },\n  integrations: [robotsTxt(), sitemap(), react(), favicons()],\n  vite: {\n    plugins: [tailwindcss()],\n  },\n  redirects: {},\n})\n",
      "type": "registry:file",
      "target": "~/astro.config.ts"
    },
    {
      "path": "cloudcannon.config.yaml",
      "content": "source: /\npaths:\n  uploads: public/images\n  static: public\ncollections_config:\n  content:\n    path: src/content\n    url: /[full_slug]/\n    name: Content\n    icon: article\n    disable_add: false\n    disable_add_folder: true\n    disable_file_actions: true\n    _enabled_editors:\n      - visual\n      - content\n      - data\n  data:\n    path: src/data\n    name: Settings\n    icon: settings\n    disable_file_actions: true\n    disable_add_folder: true\n    disable_add: true\n    _enabled_editors:\n      - data\ncollection_groups:\n  - heading: Editing\n    collections:\n      - content\n      - data\ntimezone: Etc/UTC\n_inputs:\n  # Config\n  layout:\n    hidden: true\n  block:\n    hidden: true\n  reverse:\n    hidden: true\n  # Options\n  published:\n    type: date\n    instance_value: NOW\n    options:\n      empty_type: string\n  # Base\n  name:\n    type: text\n    options:\n      empty_type: string\n  title:\n    type: text\n    options:\n      empty_type: string\n  description:\n    type: text\n    options:\n      empty_type: string\n  href:\n    type: url\n    options:\n      empty_type: string\n  tagline:\n    type: text\n    options:\n      empty_type: string\n  icon:\n    type: select\n    options:\n      empty_type: string\n      values:\n        - value: check\n          label: Check\n        - value: cross\n          label: Cross\n  rating:\n    type: range\n    options:\n      empty_type: \"null\"\n      min: 0\n      max: 5\n      step: 0.5\n  price:\n    type: number\n    options:\n      empty_type: \"null\"\n      min: 0\n      step: 0.01\n  comparePrice:\n    type: number\n    options:\n      empty_type: \"null\"\n      min: 0\n      step: 0.01\n  unit:\n    type: text\n    options:\n      empty_type: string\n  # Objects and arrays\n  list:\n    type: array\n    options:\n      empty_type: array\n  list[*]:\n    type: text\n    options:\n      empty_type: string\n  tags:\n    type: array\n    options:\n      empty_type: array\n  tags[*]:\n    type: text\n    options:\n      empty_type: string\n  socials:\n    type: array\n  socials[*]:\n    type: url\n    options:\n      empty_type: string\n  link:\n    type: object\n    options:\n      structures: _structures.link\n  links:\n    type: array\n    options:\n      empty_type: array\n      structures: _structures.link\n  link.href:\n    type: url\n    options:\n      required: true\n  link.text:\n    type: text\n    options:\n      required: true\n  seo:\n    type: object\n    options:\n      subtype: object\n      structures: _structures.seo\n\n  # Images\n  avatar:\n    type: object\n    options:\n      structures: _structures.image\n    cascade: true\n  avatars:\n    type: array\n    options:\n      structures: _structures.image\n    cascade: true\n  logo:\n    type: object\n    options:\n      structures: _structures.image\n    cascade: true\n  logos:\n    type: array\n    options:\n      structures: _structures.image\n    cascade: true\n  src:\n    type: image\n    options:\n      mime_type: image/webp\n      accepts_mime_types: image/jpeg,image/jpg,image/png,image/webp\n      resize_style: contain\n      width: 1920\n      height: 1920\n    cascade: true\n  avatar.src:\n    type: image\n    options:\n      mime_type: image/webp\n      accepts_mime_types: image/jpeg,image/jpg,image/png,image/webp,image/svg+xml\n      resize_style: cover\n      width: 100\n      height: 100\n    cascade: true\n  avatars[*].src:\n    type: image\n    options:\n      mime_type: image/webp\n      accepts_mime_types: image/jpeg,image/jpg,image/png,image/webp,image/svg+xml\n      resize_style: cover\n      width: 100\n      height: 100\n    cascade: true\n  logo.src:\n    type: image\n    options:\n      mime_type: image/webp\n      accepts_mime_types: image/jpeg,image/jpg,image/png,image/webp,image/svg+xml\n      resize_style: contain\n      width: 200\n      height: 36\n    cascade: true\n  logos[*].src:\n    type: image\n    options:\n      mime_type: image/webp\n      accepts_mime_types: image/jpeg,image/jpg,image/png,image/webp,image/svg+xml\n      resize_style: contain\n      width: 200\n      height: 36\n    cascade: true\n  # Content\n  head:\n    type: code\n    options:\n      min_visible_lines: 10\n      max_visible_lines: 30\n      tab_size: 2\n      theme: monokai\n      show_gutter: true\n      syntax: html\n    cascade: true\n  body:\n    type: code\n    options:\n      min_visible_lines: 10\n      max_visible_lines: 30\n      tab_size: 2\n      theme: monokai\n      show_gutter: true\n      syntax: html\n    cascade: true\n  css:\n    type: code\n    options:\n      min_visible_lines: 10\n      max_visible_lines: 30\n      tab_size: 2\n      theme: monokai\n      show_gutter: true\n      syntax: css\n    cascade: true\n\n  # Richtext\n  children:\n    type: html\n    options:\n      allow_resize: true\n      allow_custom_markup: false\n      remove_custom_markup: false\n      initial_height: 320\n      blockquote: true\n      bold: true\n      bulletedlist: true\n      format: p h1 h2 h3\n      image_size_attributes: false\n      italic: true\n      underline: true\n      undo: true\n    label: Content\n    cascade: true\n\n_editables:\n  content:\n    allow_custom_markup: false\n    remove_custom_markup: false\n    blockquote: true\n    bold: true\n    bulletedlist: true\n    format: p h1 h2 h3 h4 h5 h6\n    height: 1920\n    image: true\n    image_size_attributes: true\n    italic: true\n    link: true\n    mime_type: image/webp\n    numberedlist: true\n    redo: true\n    resize_style: contain\n    table: false\n    underline: true\n    undo: true\n    width: 1920\n\n_structures:\n  link:\n    values:\n      - value:\n          text: \"\"\n          href: \"\"\n  image:\n    values:\n      - value:\n          src: \"\"\n          alt: \"\"\n          title: \"\"\n  seo:\n    values:\n      - value:\n          title: \"\"\n          description: \"\"\n          image: \"\"\n          head: \"\"\n          body: \"\"\n          css: \"\"\n",
      "type": "registry:file",
      "target": "~/cloudcannon.config.yaml"
    },
    {
      "path": "prettier.config.cjs",
      "content": "/** @type {import('prettier').Config} */\nmodule.exports = {\n  endOfLine: \"lf\",\n  semi: false,\n  singleQuote: false,\n  tabWidth: 2,\n  trailingComma: \"es5\",\n  importOrder: [\n    \"^(react/(.*)$)|^(react$)\",\n    \"^(next/(.*)$)|^(next$)\",\n    \"<THIRD_PARTY_MODULES>\",\n    \"\",\n    \"^@workspace/(.*)$\",\n    \"\",\n    \"^types$\",\n    \"^@/types/(.*)$\",\n    \"^@/schemas/(.*)$\",\n    \"^@/config/(.*)$\",\n    \"^@/lib/(.*)$\",\n    \"^@/hooks/(.*)$\",\n    \"^@/components/ui/(.*)$\",\n    \"^@/components/(.*)$\",\n    \"^@/blocks/(.*)$\",\n    \"^@/registry/(.*)$\",\n    \"^@/styles/(.*)$\",\n    \"^@/app/(.*)$\",\n    \"^@/www/(.*)$\",\n    \"\",\n    \"^[./]\",\n  ],\n  importOrderSeparation: false,\n  importOrderSortSpecifiers: true,\n  importOrderBuiltinModulesToTop: true,\n  importOrderParserPlugins: [\"typescript\", \"jsx\", \"decorators-legacy\"],\n  importOrderMergeDuplicateImports: true,\n  importOrderCombineTypeAndValueImports: true,\n  plugins: [\n    \"prettier-plugin-astro\",\n    \"@ianvs/prettier-plugin-sort-imports\",\n    \"prettier-plugin-tailwindcss\",\n  ],\n}\n",
      "type": "registry:file",
      "target": "~/prettier.config.cjs"
    },
    {
      "path": "tsconfig.json",
      "content": "{\n  \"$schema\": \"https://json.schemastore.org/tsconfig\",\n  \"extends\": \"astro/tsconfigs/strict\",\n  \"display\": \"Default\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    },\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"react\",\n    \"composite\": false,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"inlineSources\": false,\n    \"isolatedModules\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"preserveWatchOutput\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true\n  },\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n",
      "type": "registry:file",
      "target": "~/tsconfig.json"
    }
  ]
}