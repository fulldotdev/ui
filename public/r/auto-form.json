{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auto-form",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "input",
    "select",
    "textarea",
    "form"
  ],
  "files": [
    {
      "path": "src/components/auto-form.tsx",
      "content": "import { useForm } from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  Form as FormRoot,\n} from \"@/components/ui/form\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\nfunction AutoFormInput({\n  control,\n  name,\n  placeholder,\n  required,\n  disabled,\n  type,\n  label,\n  description,\n}: Pick<React.ComponentProps<typeof FormField>, \"control\" | \"name\"> &\n  Pick<\n    React.ComponentProps<typeof Input>,\n    \"placeholder\" | \"required\" | \"disabled\" | \"type\"\n  > & {\n    label?: string\n    description?: string\n  }) {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <Input\n              placeholder={placeholder}\n              required={required}\n              disabled={disabled}\n              type={type}\n              {...field}\n            />\n          </FormControl>\n          <FormDescription>{description}</FormDescription>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  )\n}\n\nfunction AutoFormTextarea({\n  control,\n  name,\n  label,\n  description,\n  placeholder,\n  required,\n  disabled,\n}: Pick<React.ComponentProps<typeof FormField>, \"control\" | \"name\"> &\n  Pick<\n    React.ComponentProps<typeof Textarea>,\n    \"placeholder\" | \"required\" | \"disabled\"\n  > & {\n    label?: string\n    description?: string\n  }) {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <Textarea\n              className=\"resize-vertical\"\n              placeholder={placeholder}\n              required={required}\n              disabled={disabled}\n              {...field}\n            />\n          </FormControl>\n          <FormDescription>{description}</FormDescription>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  )\n}\n\nfunction AutoFormSelect({\n  control,\n  name,\n  label,\n  description,\n  options,\n  placeholder,\n  required,\n  disabled,\n}: Pick<React.ComponentProps<typeof FormField>, \"control\" | \"name\"> &\n  Pick<React.ComponentProps<typeof Select>, \"required\" | \"disabled\"> & {\n    label?: string\n    description?: string\n    options?: string[]\n    placeholder?: string\n  }) {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <Select\n            required={required}\n            disabled={disabled}\n            onValueChange={field.onChange}\n            defaultValue={field.value}\n          >\n            <FormControl>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {options?.map((option) => (\n                <SelectItem key={option} value={option}>\n                  {option}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <FormDescription>{description}</FormDescription>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  )\n}\n\ninterface Props extends React.ComponentProps<\"form\"> {\n  inbox?: string\n  fields?: (\n    | ({\n        type: \"text\" | \"email\" | \"tel\" | \"number\"\n      } & React.ComponentProps<typeof AutoFormInput>)\n    | ({\n        type: \"textarea\"\n      } & React.ComponentProps<typeof AutoFormTextarea>)\n    | ({\n        type: \"select\"\n      } & React.ComponentProps<typeof AutoFormSelect>)\n  )[]\n  submit?: string\n  description?: string\n}\n\nconst fieldComponents = {\n  text: AutoFormInput,\n  email: AutoFormInput,\n  tel: AutoFormInput,\n  number: AutoFormInput,\n  textarea: AutoFormTextarea,\n  select: AutoFormSelect,\n}\n\nfunction AutoForm({\n  inbox,\n  fields,\n  submit,\n  className,\n  description,\n  ...props\n}: Props) {\n  const form = useForm()\n  return (\n    <FormRoot {...form}>\n      <form\n        data-netlify=\"true\"\n        method=\"POST\"\n        className={cn(\"flex w-full max-w-2xl flex-col gap-6\", className)}\n        {...props}\n      >\n        {/* Cloudcannon fields */}\n        {inbox && <input type=\"hidden\" name=\"inbox_key\" value={inbox} />}\n        <input type=\"text\" name=\"_gotcha\" style={{ display: \"none\" }} />\n        {/* Always include the page path in the form data */}\n        <input\n          type=\"text\"\n          name=\"Pagina\"\n          value={typeof window !== \"undefined\" ? window.location.pathname : \"\"}\n          style={{ display: \"none\" }}\n        />\n        {/* Fields definitions */}\n        {fields?.map(({ type, ...field }) => {\n          const Field = fieldComponents[type]\n          return <Field control={form.control} {...field} />\n        })}\n        <Button className=\"flex\" type=\"submit\">\n          {submit}\n        </Button>\n        {description && (\n          <p className=\"text-muted-foreground text-sm\">{description}</p>\n        )}\n      </form>\n    </FormRoot>\n  )\n}\n\nexport { AutoFormInput, AutoFormTextarea, AutoFormSelect, AutoForm }\n",
      "type": "registry:ui"
    }
  ]
}